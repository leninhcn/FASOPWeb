{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createCanvas, loadImage } from \"canvas\";\nexport default {\n  name: \"ImageMerging\",\n  data() {\n    return {\n      mergedImageUrl: \"#\"\n    };\n  },\n  mounted() {\n    this.axios.get(`api/chatapp/GetEmpAllGroup?emp_id=10003367`).then(async res => {\n      const lsrImg = [];\n      res.data[0].INFO.EMP_AVATAR.forEach((el, id) => {\n        if (id <= 3) {\n          lsrImg.push(el.AVATAR);\n        } else {\n          return;\n        }\n      });\n      this.mergedImageUrl = await this.ImageMerging(lsrImg);\n    }).catch(err => {\n      console.log(err);\n    });\n  },\n  methods: {\n    async ImageMerging(imgList) {\n      if (!imgList || imgList.lenght > 4) {\n        return \"#\";\n      }\n      const canvasWidth = 1000;\n      const canvasHeight = 1000;\n\n      // Tạo đối tượng canvas với kích thước tương ứng\n      let canvas = createCanvas(500, 500);\n      let ctx = canvas.getContext(\"2d\");\n      var lstSyncIMG = [];\n      let imgTemp = undefined;\n      return new Promise((resolve, reject) => {\n        const promises = [];\n        imgList.forEach(task => {\n          const promise = new Promise((innerResolve, innerReject) => {\n            try {\n              imgTemp = loadImage(`data:image/png;base64,${task}`);\n              ctx.drawImage(imgTemp, 0, 0, 500, 500);\n              var temp1 = loadImage(canvas.toDataURL(\"image/png\"));\n              lstSyncIMG.push(temp1);\n              console.log(lstSyncIMG.length);\n              innerResolve();\n            } catch (error) {\n              innerReject(error);\n            }\n          });\n          promises.push(promise);\n        });\n        Promise.all(promises).then(() => {\n          console.log(lstSyncIMG.length);\n          canvas = createCanvas(canvasWidth, canvasHeight);\n          ctx = canvas.getContext(\"2d\");\n          lstSyncIMG.forEach((el, idx) => {\n            console.log(idx);\n            switch (idx) {\n              case 0:\n                ctx.drawImage(el, 0, 0, 500, 500);\n                break;\n              case 1:\n                ctx.drawImage(el, 500, 0, 500, 500);\n                break;\n              case 2:\n                ctx.drawImage(el, 0, 500, 500, 500);\n                break;\n              case 3:\n                ctx.drawImage(el, 500, 500, 500, 500);\n                break;\n              default:\n                break;\n            }\n          });\n          resolve(canvas.toDataURL(\"image/png\"));\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["createCanvas","loadImage","name","data","mergedImageUrl","mounted","axios","get","then","res","lsrImg","INFO","EMP_AVATAR","forEach","el","id","push","AVATAR","ImageMerging","catch","err","console","log","methods","imgList","lenght","canvasWidth","canvasHeight","canvas","ctx","getContext","lstSyncIMG","imgTemp","undefined","Promise","resolve","reject","promises","task","promise","innerResolve","innerReject","drawImage","temp1","toDataURL","length","error","all","idx"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\QMessage\\ImageMerging.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <img :src=\"mergedImageUrl\" alt=\"Merged Image\" />\r\n  </div>\r\n</template>\r\n  \r\n  <script>\r\nimport { createCanvas, loadImage } from \"canvas\";\r\n\r\nexport default {\r\n  name: \"ImageMerging\",\r\n  data() {\r\n    return {\r\n      mergedImageUrl: \"#\",\r\n    };\r\n  },\r\n  mounted() {\r\n    this.axios\r\n      .get(`api/chatapp/GetEmpAllGroup?emp_id=10003367`)\r\n      .then(async (res) => {\r\n        const lsrImg = [];\r\n        res.data[0].INFO.EMP_AVATAR.forEach((el, id) => {\r\n          if (id <= 3) {\r\n            lsrImg.push(el.AVATAR);\r\n          } else {\r\n            return;\r\n          }\r\n        });\r\n        this.mergedImageUrl = await this.ImageMerging(lsrImg);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  },\r\n  methods: {\r\n    async ImageMerging(imgList) {\r\n      if (!imgList || imgList.lenght > 4) {\r\n        return \"#\";\r\n      }\r\n      const canvasWidth = 1000;\r\n      const canvasHeight = 1000;\r\n\r\n      // Tạo đối tượng canvas với kích thước tương ứng\r\n      let canvas = createCanvas(500, 500);\r\n      let ctx = canvas.getContext(\"2d\");\r\n      var lstSyncIMG = [];\r\n      let imgTemp = undefined;\r\n\r\n      return new Promise((resolve, reject) => {\r\n        const promises = [];\r\n\r\n        imgList.forEach((task) => {\r\n          const promise = new Promise((innerResolve, innerReject) => {\r\n            try {\r\n              imgTemp = loadImage(`data:image/png;base64,${task}`);\r\n              ctx.drawImage(imgTemp, 0, 0, 500, 500);\r\n              var temp1 = loadImage(canvas.toDataURL(\"image/png\"));\r\n              lstSyncIMG.push(temp1);\r\n              console.log(lstSyncIMG.length);\r\n              innerResolve();\r\n            } catch (error) {\r\n              innerReject(error);\r\n            }\r\n          });\r\n\r\n          promises.push(promise);\r\n        });\r\n\r\n        Promise.all(promises)\r\n          .then(() => {\r\n            console.log(lstSyncIMG.length);\r\n            canvas = createCanvas(canvasWidth, canvasHeight);\r\n            ctx = canvas.getContext(\"2d\");\r\n\r\n            lstSyncIMG.forEach((el, idx) => {\r\n              console.log(idx);\r\n              switch (idx) {\r\n                case 0:\r\n                  ctx.drawImage(el, 0, 0, 500, 500);\r\n                  break;\r\n                case 1:\r\n                  ctx.drawImage(el, 500, 0, 500, 500);\r\n                  break;\r\n                case 2:\r\n                  ctx.drawImage(el, 0, 500, 500, 500);\r\n                  break;\r\n                case 3:\r\n                  ctx.drawImage(el, 500, 500, 500, 500);\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            });\r\n\r\n            resolve(canvas.toDataURL(\"image/png\"));\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}