{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-85301dae\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_q_chat_message = _resolveComponent(\"q-chat-message\");\n  return _openBlock(), _createBlock(_component_q_chat_message, {\n    name: $props.Name,\n    avatar: $data.NoImage,\n    stamp: $props.Stamp,\n    sent: $props.Sent,\n    \"text-color\": $props.TextColor,\n    \"bg-color\": $props.BGColor\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.Message, (msg, id) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: id\n      }, [_createTextVNode(_toDisplayString(msg.text) + \" \", 1 /* TEXT */), msg.icon ? (_openBlock(), _createElementBlock(\"img\", {\n        key: 0,\n        src: $options.imageFromByte(msg.icon),\n        class: \"my-emoticon\"\n      }, null, 8 /* PROPS */, _hoisted_1)) : _createCommentVNode(\"v-if\", true)]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"name\", \"avatar\", \"stamp\", \"sent\", \"text-color\", \"bg-color\"]);\n}","map":{"version":3,"names":["_createBlock","_component_q_chat_message","name","$props","Name","avatar","$data","NoImage","stamp","Stamp","sent","Sent","TextColor","BGColor","_createElementBlock","_Fragment","_renderList","Message","msg","id","key","text","icon","src","$options","imageFromByte","class"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\QMessage\\Qmsg.vue"],"sourcesContent":["<template>\r\n  <q-chat-message\r\n    :name=\"Name\"\r\n    :avatar=\"NoImage\"\r\n    :stamp=\"Stamp\"    \r\n    :sent=\"Sent\"\r\n    :text-color=\"TextColor\"\r\n    :bg-color=\"BGColor\"\r\n  >\r\n    <div v-for=\"(msg, id) in Message\" :key=\"id\">\r\n      {{ msg.text }}\r\n      <img v-if=\"msg.icon\" :src=\"imageFromByte(msg.icon)\" class=\"my-emoticon\" />\r\n    </div>\r\n  </q-chat-message>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"qmsg-1\",\r\n  props: {\r\n    Name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    MemberID: {\r\n      type: Number,\r\n      required: false,\r\n    },\r\n    Stamp: String,\r\n    Sent: Boolean,\r\n    TextColor: String,\r\n    BGColor: String,\r\n    Message: Array,\r\n  },\r\n  mounted() {\r\n    this.getMember(this.MemberID);\r\n  },\r\n  methods: {\r\n    imageFromByte(strBase64) {\r\n      return `data:image/jpeg;base64,${strBase64}`;\r\n    },\r\n    async getMember(id) {\r\n      await this.axios\r\n        .get(`api/chatapp/MemberInfo?emp_id=${id}`)\r\n        .then((res) => {\r\n          this.MemberInfo = res.data;\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      MemberInfo: undefined,\r\n      NoImage: \"../../assets/noImg.png\",\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.my-emoticon {\r\n  vertical-align: middle;\r\n  height: 2em;\r\n  width: 2em;\r\n}\r\n</style>"],"mappings":";;;;;uBACEA,YAAA,CAYiBC,yBAAA;IAXdC,IAAI,EAAEC,MAAA,CAAAC,IAAI;IACVC,MAAM,EAAEC,KAAA,CAAAC,OAAO;IACfC,KAAK,EAAEL,MAAA,CAAAM,KAAK;IACZC,IAAI,EAAEP,MAAA,CAAAQ,IAAI;IACV,YAAU,EAAER,MAAA,CAAAS,SAAS;IACrB,UAAQ,EAAET,MAAA,CAAAU;;sBAEN,MAA4B,E,kBAAjCC,mBAAA,CAGMC,SAAA,QAAAC,WAAA,CAHmBb,MAAA,CAAAc,OAAO,GAAnBC,GAAG,EAAEC,EAAE;2BAApBL,mBAAA,CAGM;QAH6BM,GAAG,EAAED;MAAE,I,kCACrCD,GAAG,CAACG,IAAI,IAAG,GACd,iBAAWH,GAAG,CAACI,IAAI,I,cAAnBR,mBAAA,CAA0E;;QAApDS,GAAG,EAAEC,QAAA,CAAAC,aAAa,CAACP,GAAG,CAACI,IAAI;QAAGI,KAAK,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}