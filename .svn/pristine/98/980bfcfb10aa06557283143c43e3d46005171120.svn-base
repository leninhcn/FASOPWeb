{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_MyMSG = _resolveComponent(\"MyMSG\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" <q-chat-message\\r\\n    :name=\\\"Name\\\"\\r\\n    :avatar=\\\"MemberInfo ? imageFromByte(MemberInfo.AVATAR) : noIMG\\\"\\r\\n    :stamp=\\\"GenStampTime(Stamp)\\\"\\r\\n    :sent=\\\"Sent\\\"\\r\\n    :text-color=\\\"TextColor\\\"\\r\\n    :bg-color=\\\"BGColor\\\"\\r\\n    :size=\\\"msg_size\\\"\\r\\n  >\\r\\n    <div v-for=\\\"(msg, id) in Message\\\" :key=\\\"id\\\">\\r\\n      {{ msg.text }}\\r\\n      <img v-if=\\\"msg.icon\\\" :src=\\\"imageFromByte(msg.icon)\\\" class=\\\"my-emoticon\\\" />\\r\\n    </div>\\r\\n  </q-chat-message> \"), _createElementVNode(\"div\", null, [_createVNode(_component_MyMSG, {\n    messages: $props.Message,\n    msgType: \"text\",\n    Owner: $props.Sent,\n    sender: $props.Name,\n    stamp: $options.GenStampTime($props.Stamp),\n    avatar: $data.MemberInfo ? $options.imageFromByte($data.MemberInfo.AVATAR) : $data.noIMG\n  }, null, 8 /* PROPS */, [\"messages\", \"Owner\", \"sender\", \"stamp\", \"avatar\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_createCommentVNode","_createElementVNode","_createVNode","_component_MyMSG","messages","$props","Message","msgType","Owner","Sent","sender","Name","stamp","$options","GenStampTime","Stamp","avatar","$data","MemberInfo","imageFromByte","AVATAR","noIMG"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\QMessage\\Qmsg.vue"],"sourcesContent":["<template>\r\n  <!-- <q-chat-message\r\n    :name=\"Name\"\r\n    :avatar=\"MemberInfo ? imageFromByte(MemberInfo.AVATAR) : noIMG\"\r\n    :stamp=\"GenStampTime(Stamp)\"\r\n    :sent=\"Sent\"\r\n    :text-color=\"TextColor\"\r\n    :bg-color=\"BGColor\"\r\n    :size=\"msg_size\"\r\n  >\r\n    <div v-for=\"(msg, id) in Message\" :key=\"id\">\r\n      {{ msg.text }}\r\n      <img v-if=\"msg.icon\" :src=\"imageFromByte(msg.icon)\" class=\"my-emoticon\" />\r\n    </div>\r\n  </q-chat-message> -->\r\n  <div>\r\n    <MyMSG\r\n      :messages=\"Message\"\r\n      msgType=\"text\"\r\n      :Owner=\"Sent\"\r\n      :sender=\"Name\"\r\n      :stamp=\"GenStampTime(Stamp)\"\r\n      :avatar=\"MemberInfo ? imageFromByte(MemberInfo.AVATAR) : noIMG\"\r\n    ></MyMSG>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\ndayjs.extend(relativeTime);\r\nimport MyMSG from \"./MyMessage.vue\";\r\nexport default {\r\n  name: \"qmsg-1\",\r\n  components: {\r\n    MyMSG,\r\n  },\r\n  props: {\r\n    Name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    MemberID: {\r\n      type: Number,\r\n      required: false,\r\n    },\r\n    Stamp: Date,\r\n    Sent: Boolean,\r\n    TextColor: String,\r\n    BGColor: String,\r\n    Message: Array,\r\n  },\r\n  mounted() {\r\n    this.getMember(this.MemberID);\r\n  },\r\n  methods: {\r\n    GenStampTime(time) {\r\n      if (!time) {\r\n        return \"N/A\";\r\n      }\r\n      const pastDate = new Date(time);\r\n      const currentDate = new Date();\r\n      const timeDiff = currentDate.getTime() - pastDate.getTime();\r\n      const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));\r\n      if (daysDiff > 7) {\r\n        return time;\r\n      } else return dayjs(pastDate).fromNow();\r\n    },\r\n    imageFromByte(strBase64) {\r\n      return `data:image/jpeg;base64,${strBase64}`;\r\n    },\r\n    async getMember(id) {\r\n      const avt = sessionStorage.getItem(`avt${id}`);\r\n      if (avt.length > 500) {\r\n        this.MemberInfo = { AVATAR: avt };\r\n        return;\r\n      }\r\n      await this.axios\r\n        .get(`api/chatapp/MemberInfo?emp_id=${id}`)\r\n        .then((res) => {\r\n          this.MemberInfo = res.data;\r\n          sessionStorage.setItem(\r\n            `avt${this.MemberInfo.EMP_ID}`,\r\n            this.MemberInfo.AVATAR\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      msg_size: 6,\r\n      MemberInfo: undefined,\r\n      noIMG: `${this.axios.defaults.baseURL}Images/noImg.png`,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.container {\r\n  margin: {\r\n    top: 35px;\r\n  };\r\n}\r\n.my-emoticon {\r\n  vertical-align: middle;\r\n  height: 2em;\r\n  width: 2em;\r\n}\r\n</style>"],"mappings":";;;6DACEA,mBAAA,8dAaqB,EACrBC,mBAAA,CASM,cARJC,YAAA,CAOSC,gBAAA;IANNC,QAAQ,EAAEC,MAAA,CAAAC,OAAO;IAClBC,OAAO,EAAC,MAAM;IACbC,KAAK,EAAEH,MAAA,CAAAI,IAAI;IACXC,MAAM,EAAEL,MAAA,CAAAM,IAAI;IACZC,KAAK,EAAEC,QAAA,CAAAC,YAAY,CAACT,MAAA,CAAAU,KAAK;IACzBC,MAAM,EAAEC,KAAA,CAAAC,UAAU,GAAGL,QAAA,CAAAM,aAAa,CAACF,KAAA,CAAAC,UAAU,CAACE,MAAM,IAAIH,KAAA,CAAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}