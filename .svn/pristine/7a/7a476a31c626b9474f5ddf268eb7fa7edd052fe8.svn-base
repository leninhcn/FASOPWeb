{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, createElementVNode as _createElementVNode, withCtx as _withCtx, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-656467e0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nconst _hoisted_2 = {\n  class: \"q-pa-md row justify-center\",\n  style: {\n    \"padding\": \"0 !important\"\n  }\n};\nconst _hoisted_3 = {\n  style: {\n    \"width\": \"100%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Qmsg = _resolveComponent(\"Qmsg\");\n  const _component_q_scroll_area = _resolveComponent(\"q-scroll-area\");\n  const _component_ctlBar = _resolveComponent(\"ctlBar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_q_scroll_area, {\n    dark: \"\",\n    class: \"text-white rounded-borders\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"370px\"\n    },\n    ref: \"hisScroll\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ChatHis, (msg, id) => {\n      return _openBlock(), _createBlock(_component_Qmsg, {\n        key: id,\n        Name: msg.Sender,\n        MemberID: msg.ID,\n        BGColor: msg.Sender == 'NinhLe' ? $data.MSGTextColor.Sender : $data.MSGTextColor.Receiver,\n        Message: msg.message,\n        Sent: msg.Sender == 'NinhLe',\n        Stamp: \"7 minutes ago\",\n        TextColor: \"white\"\n      }, null, 8 /* PROPS */, [\"Name\", \"MemberID\", \"BGColor\", \"Message\", \"Sent\"]);\n    }), 128 /* KEYED_FRAGMENT */))])])]),\n\n    _: 1 /* STABLE */\n  }, 512 /* NEED_PATCH */), _createVNode(_component_ctlBar)]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_createVNode","_component_q_scroll_area","dark","ref","_createElementVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","ChatHis","msg","id","_createBlock","_component_Qmsg","key","Name","Sender","MemberID","ID","BGColor","MSGTextColor","Receiver","Message","message","Sent","Stamp","TextColor","_component_ctlBar"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\QMessage\\HistoryBox.vue"],"sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n    <q-scroll-area\r\n      dark\r\n      class=\"text-white rounded-borders\"\r\n      style=\"width: 100%; height: 370px\"\r\n      ref=\"hisScroll\"\r\n    >\r\n      <div class=\"q-pa-md row justify-center\" style=\"padding: 0 !important\">\r\n        <div style=\"width: 100%\">\r\n          <Qmsg\r\n            v-for=\"(msg, id) in ChatHis\"\r\n            :key=\"id\"\r\n            :Name=\"msg.Sender\"\r\n            :MemberID=\"msg.ID\"\r\n            :BGColor=\"\r\n              msg.Sender == 'NinhLe'\r\n                ? MSGTextColor.Sender\r\n                : MSGTextColor.Receiver\r\n            \"\r\n            :Message=\"msg.message\"\r\n            :Sent=\"msg.Sender == 'NinhLe'\"\r\n            Stamp=\"7 minutes ago\"\r\n            TextColor=\"white\"\r\n          ></Qmsg>\r\n        </div>\r\n      </div>\r\n    </q-scroll-area>\r\n    <ctlBar></ctlBar>\r\n  </div>\r\n</template>\r\n  \r\n  <script>\r\nimport Qmsg from \"./Qmsg.vue\";\r\nimport ctlBar from \"./MsgSender.vue\";\r\nexport default {\r\n  name: \"HistoryBox\",\r\n  components: {\r\n    Qmsg,\r\n    ctlBar,\r\n  },\r\n  props: {},\r\n  mounted() {\r\n    this.GetMemberInfor();\r\n    this.GetChatHistory();\r\n  },\r\n  data() {\r\n    return {\r\n      testIMG: \"\",\r\n      MSGTextColor: { Sender: \"indigo-14\", Receiver: \"blue-grey-3\" },\r\n      members: undefined,\r\n      groupID: 2,\r\n      ChatHis: [],\r\n    };\r\n  },\r\n  methods: {\r\n    ShowAvatar(member) {\r\n      if (this.members)\r\n        this.members.forEach((item) => {\r\n          if (item.EMP_ID == member) {\r\n            return { img: this.imageFromByte(item.PICUSER) };\r\n          }\r\n        });\r\n    },\r\n    imageFromByte(strBase64) {\r\n      return `data:image/jpeg;base64,${strBase64}`;\r\n    },\r\n    async GetMemberInfor() {\r\n      await this.axios\r\n        .get(`api/chatapp/GetGroupMemberInfo?groupID=${this.groupID}`)\r\n        .then((res) => {\r\n          this.members = res.data;\r\n          this.testIMG = this.members[0].PICUSER;\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response.data);\r\n        });\r\n    },\r\n    async GetChatHistory() {\r\n      await this.axios\r\n        .get(`api/chatapp/GetHistory?groupID=${this.groupID}`)\r\n        .then((res) => {\r\n          var sentEMP = res.data[0].SENDER_ID;\r\n          var msg = undefined;\r\n          res.data.forEach((item) => {\r\n            if (!msg) {\r\n              msg = {\r\n                Sender: item.SENDER,\r\n                ID: item.SENDER_ID,\r\n                message: [{ text: item.MES_CONTENT }],\r\n              };\r\n            } else {\r\n              if (sentEMP == item.SENDER_ID) {\r\n                msg.message.push({ text: item.MES_CONTENT });\r\n              } else {\r\n                this.ChatHis.push(msg);\r\n                msg = {\r\n                  Sender: item.SENDER,\r\n                  ID: item.SENDER_ID,\r\n                  message: [{ text: item.MES_CONTENT }],\r\n                };\r\n              }\r\n            }\r\n            sentEMP = item.SENDER_ID;\r\n          });\r\n          this.ChatHis.push(msg);\r\n          setTimeout(() => {\r\n            this.$refs.hisScroll.setScrollPercentage(\"vertical\", 1, 500);\r\n          }, 1000);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n  \r\n  <!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n  <style lang=\"scss\" scoped>\r\n.hello {\r\n  margin: {\r\n    left: 10px;\r\n  };\r\n}\r\n</style>\r\n  "],"mappings":";;;EACOA,KAAK,EAAC;AAAO;;EAOTA,KAAK,EAAC,4BAA4B;EAACC,KAA6B,EAA7B;IAAA;EAAA;;;EACjCA,KAAmB,EAAnB;IAAA;EAAA;AAAmB;;;;;uBAR9BC,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJC,YAAA,CAyBgBC,wBAAA;IAxBdC,IAAI,EAAJ,EAAI;IACJN,KAAK,EAAC,4BAA4B;IAClCC,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAAkC;IAClCM,GAAG,EAAC;;sBAEJ,MAkBM,CAlBNC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJD,mBAAA,CAgBM,OAhBNE,UAgBM,I,kBAfJR,mBAAA,CAcQS,SAAA,QAAAC,WAAA,CAbcC,KAAA,CAAAC,OAAO,GAAnBC,GAAG,EAAEC,EAAE;2BADjBC,YAAA,CAcQC,eAAA;QAZLC,GAAG,EAAEH,EAAE;QACPI,IAAI,EAAEL,GAAG,CAACM,MAAM;QAChBC,QAAQ,EAAEP,GAAG,CAACQ,EAAE;QAChBC,OAAO,EAAkBT,GAAG,CAACM,MAAM,eAAgCR,KAAA,CAAAY,YAAY,CAACJ,MAAM,GAAoBR,KAAA,CAAAY,YAAY,CAACC,QAAQ;QAK/HC,OAAO,EAAEZ,GAAG,CAACa,OAAO;QACpBC,IAAI,EAAEd,GAAG,CAACM,MAAM;QACjBS,KAAK,EAAC,eAAe;QACrBC,SAAS,EAAC;;;;;4BAKlB3B,YAAA,CAAiB4B,iBAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}