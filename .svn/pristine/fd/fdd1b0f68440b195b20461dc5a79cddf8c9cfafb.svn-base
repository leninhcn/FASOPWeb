{"ast":null,"code":"import { h, withDirectives } from 'vue';\nexport function hSlot(slot, otherwise) {\n  return slot !== void 0 ? slot() || otherwise : otherwise;\n}\nexport function hUniqueSlot(slot, otherwise) {\n  if (slot !== void 0) {\n    const vnode = slot();\n    if (vnode !== void 0 && vnode !== null) {\n      return vnode.slice();\n    }\n  }\n  return otherwise;\n}\n\n/**\n * Source definitely exists,\n * so it's merged with the possible slot\n */\nexport function hMergeSlot(slot, source) {\n  return slot !== void 0 ? source.concat(slot()) : source;\n}\n\n/**\n * Merge with possible slot,\n * even if source might not exist\n */\nexport function hMergeSlotSafely(slot, source) {\n  if (slot === void 0) {\n    return source;\n  }\n  return source !== void 0 ? source.concat(slot()) : slot();\n}\n\n/*\n * (String)  key       - unique vnode key\n * (Boolean) condition - should change ONLY when adding/removing directive\n */\nexport function hDir(tag, data, children, key, condition, getDirsFn) {\n  data.key = key + condition;\n  const vnode = h(tag, data, children);\n  return condition === true ? withDirectives(vnode, getDirsFn()) : vnode;\n}","map":{"version":3,"names":["h","withDirectives","hSlot","slot","otherwise","hUniqueSlot","vnode","slice","hMergeSlot","source","concat","hMergeSlotSafely","hDir","tag","data","children","key","condition","getDirsFn"],"sources":["D:/LearnVueJS/Vue3/Projects/fa-sop-online/node_modules/quasar/src/utils/private/render.js"],"sourcesContent":["import { h, withDirectives } from 'vue'\n\nexport function hSlot (slot, otherwise) {\n  return slot !== void 0\n    ? slot() || otherwise\n    : otherwise\n}\n\nexport function hUniqueSlot (slot, otherwise) {\n  if (slot !== void 0) {\n    const vnode = slot()\n    if (vnode !== void 0 && vnode !== null) {\n      return vnode.slice()\n    }\n  }\n\n  return otherwise\n}\n\n/**\n * Source definitely exists,\n * so it's merged with the possible slot\n */\nexport function hMergeSlot (slot, source) {\n  return slot !== void 0\n    ? source.concat(slot())\n    : source\n}\n\n/**\n * Merge with possible slot,\n * even if source might not exist\n */\nexport function hMergeSlotSafely (slot, source) {\n  if (slot === void 0) {\n    return source\n  }\n\n  return source !== void 0\n    ? source.concat(slot())\n    : slot()\n}\n\n/*\n * (String)  key       - unique vnode key\n * (Boolean) condition - should change ONLY when adding/removing directive\n */\nexport function hDir (\n  tag,\n  data,\n  children,\n  key,\n  condition,\n  getDirsFn\n) {\n  data.key = key + condition\n\n  const vnode = h(tag, data, children)\n\n  return condition === true\n    ? withDirectives(vnode, getDirsFn())\n    : vnode\n}\n"],"mappings":"AAAA,SAASA,CAAC,EAAEC,cAAc,QAAQ,KAAK;AAEvC,OAAO,SAASC,KAAKA,CAAEC,IAAI,EAAEC,SAAS,EAAE;EACtC,OAAOD,IAAI,KAAK,KAAK,CAAC,GAClBA,IAAI,EAAE,IAAIC,SAAS,GACnBA,SAAS;AACf;AAEA,OAAO,SAASC,WAAWA,CAAEF,IAAI,EAAEC,SAAS,EAAE;EAC5C,IAAID,IAAI,KAAK,KAAK,CAAC,EAAE;IACnB,MAAMG,KAAK,GAAGH,IAAI,EAAE;IACpB,IAAIG,KAAK,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,IAAI,EAAE;MACtC,OAAOA,KAAK,CAACC,KAAK,EAAE;IACtB;EACF;EAEA,OAAOH,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASI,UAAUA,CAAEL,IAAI,EAAEM,MAAM,EAAE;EACxC,OAAON,IAAI,KAAK,KAAK,CAAC,GAClBM,MAAM,CAACC,MAAM,CAACP,IAAI,EAAE,CAAC,GACrBM,MAAM;AACZ;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASE,gBAAgBA,CAAER,IAAI,EAAEM,MAAM,EAAE;EAC9C,IAAIN,IAAI,KAAK,KAAK,CAAC,EAAE;IACnB,OAAOM,MAAM;EACf;EAEA,OAAOA,MAAM,KAAK,KAAK,CAAC,GACpBA,MAAM,CAACC,MAAM,CAACP,IAAI,EAAE,CAAC,GACrBA,IAAI,EAAE;AACZ;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASS,IAAIA,CAClBC,GAAG,EACHC,IAAI,EACJC,QAAQ,EACRC,GAAG,EACHC,SAAS,EACTC,SAAS,EACT;EACAJ,IAAI,CAACE,GAAG,GAAGA,GAAG,GAAGC,SAAS;EAE1B,MAAMX,KAAK,GAAGN,CAAC,CAACa,GAAG,EAAEC,IAAI,EAAEC,QAAQ,CAAC;EAEpC,OAAOE,SAAS,KAAK,IAAI,GACrBhB,cAAc,CAACK,KAAK,EAAEY,SAAS,EAAE,CAAC,GAClCZ,KAAK;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}