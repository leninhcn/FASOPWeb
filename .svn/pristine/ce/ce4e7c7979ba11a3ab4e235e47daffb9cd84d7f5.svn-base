{"ast":null,"code":"import { isObject } from './is';\nlet id = 0;\nlet offsetBase = void 0;\nfunction getAbsolutePosition(el, resize) {\n  if (offsetBase === void 0) {\n    offsetBase = document.createElement('div');\n    offsetBase.style.cssText = 'position: absolute; left: 0; top: 0';\n    document.body.appendChild(offsetBase);\n  }\n  const boundingRect = el.getBoundingClientRect();\n  const baseRect = offsetBase.getBoundingClientRect();\n  const {\n    marginLeft,\n    marginRight,\n    marginTop,\n    marginBottom\n  } = window.getComputedStyle(el);\n  const marginH = parseInt(marginLeft, 10) + parseInt(marginRight, 10);\n  const marginV = parseInt(marginTop, 10) + parseInt(marginBottom, 10);\n  return {\n    left: boundingRect.left - baseRect.left,\n    top: boundingRect.top - baseRect.top,\n    width: boundingRect.right - boundingRect.left,\n    height: boundingRect.bottom - boundingRect.top,\n    widthM: boundingRect.right - boundingRect.left + (resize === true ? 0 : marginH),\n    heightM: boundingRect.bottom - boundingRect.top + (resize === true ? 0 : marginV),\n    marginH: resize === true ? marginH : 0,\n    marginV: resize === true ? marginV : 0\n  };\n}\nfunction getAbsoluteSize(el) {\n  return {\n    width: el.scrollWidth,\n    height: el.scrollHeight\n  };\n}\n\n// firefox rulez\nconst styleEdges = ['Top', 'Right', 'Bottom', 'Left'];\nconst styleBorderRadiuses = ['borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomRightRadius', 'borderBottomLeftRadius'];\nconst reStyleSkipKey = /-block|-inline|block-|inline-/;\nconst reStyleSkipRule = /(-block|-inline|block-|inline-).*:/;\nfunction getComputedStyle(el, props) {\n  const style = window.getComputedStyle(el);\n  const fixed = {};\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n    if (style[prop] === '') {\n      if (prop === 'cssText') {\n        const styleLen = style.length;\n        let val = '';\n        for (let i = 0; i < styleLen; i++) {\n          if (reStyleSkipKey.test(style[i]) !== true) {\n            val += style[i] + ': ' + style[style[i]] + '; ';\n          }\n        }\n        fixed[prop] = val;\n      } else if (['borderWidth', 'borderStyle', 'borderColor'].indexOf(prop) > -1) {\n        const suffix = prop.replace('border', '');\n        let val = '';\n        for (let j = 0; j < styleEdges.length; j++) {\n          const subProp = 'border' + styleEdges[j] + suffix;\n          val += style[subProp] + ' ';\n        }\n        fixed[prop] = val;\n      } else if (prop === 'borderRadius') {\n        let val1 = '';\n        let val2 = '';\n        for (let j = 0; j < styleBorderRadiuses.length; j++) {\n          const val = style[styleBorderRadiuses[j]].split(' ');\n          val1 += val[0] + ' ';\n          val2 += (val[1] === void 0 ? val[0] : val[1]) + ' ';\n        }\n        fixed[prop] = val1 + '/ ' + val2;\n      } else {\n        fixed[prop] = style[prop];\n      }\n    } else {\n      if (prop === 'cssText') {\n        fixed[prop] = style[prop].split(';').filter(val => reStyleSkipRule.test(val) !== true).join(';');\n      } else {\n        fixed[prop] = style[prop];\n      }\n    }\n  }\n  return fixed;\n}\nconst zIndexPositions = ['absolute', 'fixed', 'relative', 'sticky'];\nfunction getMaxZIndex(elStart) {\n  let el = elStart;\n  let maxIndex = 0;\n  while (el !== null && el !== document) {\n    const {\n      position,\n      zIndex\n    } = window.getComputedStyle(el);\n    const zIndexNum = Number(zIndex);\n    if (zIndexNum > maxIndex && (el === elStart || zIndexPositions.includes(position) === true)) {\n      maxIndex = zIndexNum;\n    }\n    el = el.parentNode;\n  }\n  return maxIndex;\n}\nfunction normalizeElements(opts) {\n  return {\n    from: opts.from,\n    to: opts.to !== void 0 ? opts.to : opts.from\n  };\n}\nfunction normalizeOptions(options) {\n  if (typeof options === 'number') {\n    options = {\n      duration: options\n    };\n  } else if (typeof options === 'function') {\n    options = {\n      onEnd: options\n    };\n  }\n  return {\n    ...options,\n    waitFor: options.waitFor === void 0 ? 0 : options.waitFor,\n    duration: isNaN(options.duration) === true ? 300 : parseInt(options.duration, 10),\n    easing: typeof options.easing === 'string' && options.easing.length !== 0 ? options.easing : 'ease-in-out',\n    delay: isNaN(options.delay) === true ? 0 : parseInt(options.delay, 10),\n    fill: typeof options.fill === 'string' && options.fill.length !== 0 ? options.fill : 'none',\n    resize: options.resize === true,\n    // account for UMD too where modifiers will be lowercased to work\n    useCSS: options.useCSS === true || options.usecss === true,\n    // account for UMD too where modifiers will be lowercased to work\n    hideFromClone: options.hideFromClone === true || options.hidefromclone === true,\n    // account for UMD too where modifiers will be lowercased to work\n    keepToClone: options.keepToClone === true || options.keeptoclone === true,\n    tween: options.tween === true,\n    tweenFromOpacity: isNaN(options.tweenFromOpacity) === true ? 0.6 : parseFloat(options.tweenFromOpacity),\n    tweenToOpacity: isNaN(options.tweenToOpacity) === true ? 0.5 : parseFloat(options.tweenToOpacity)\n  };\n}\nfunction getElement(element) {\n  const type = typeof element;\n  return type === 'function' ? element() : type === 'string' ? document.querySelector(element) : element;\n}\nfunction isValidElement(element) {\n  return element && element.ownerDocument === document && element.parentNode !== null;\n}\nexport default function morph(_options) {\n  let cancel = () => false;\n  let cancelStatus = false;\n  let endElementTo = true;\n  const elements = normalizeElements(_options);\n  const options = normalizeOptions(_options);\n  const elFrom = getElement(elements.from);\n  if (isValidElement(elFrom) !== true) {\n    // we return a cancel function that return false, meaning the cancel function failed\n    return cancel;\n  }\n  // we clean other morphs running on this element\n  typeof elFrom.qMorphCancel === 'function' && elFrom.qMorphCancel();\n  let animationFromClone = void 0;\n  let animationFromTween = void 0;\n  let animationToClone = void 0;\n  let animationTo = void 0;\n  const elFromParent = elFrom.parentNode;\n  const elFromNext = elFrom.nextElementSibling;\n\n  // we get the dimensions and characteristics\n  // of the parent of the initial element before changes\n  const elFromPosition = getAbsolutePosition(elFrom, options.resize);\n  const {\n    width: elFromParentWidthBefore,\n    height: elFromParentHeightBefore\n  } = getAbsoluteSize(elFromParent);\n  const {\n    borderWidth: elFromBorderWidth,\n    borderStyle: elFromBorderStyle,\n    borderColor: elFromBorderColor,\n    borderRadius: elFromBorderRadius,\n    backgroundColor: elFromBackground,\n    transform: elFromTransform,\n    position: elFromPositioningType,\n    cssText: elFromCssText\n  } = getComputedStyle(elFrom, ['borderWidth', 'borderStyle', 'borderColor', 'borderRadius', 'backgroundColor', 'transform', 'position', 'cssText']);\n  const elFromClassSaved = elFrom.classList.toString();\n  const elFromStyleSaved = elFrom.style.cssText;\n\n  // we make a clone of the initial element and\n  // use it to display until the final element is ready\n  // and to change the occupied space during animation\n  const elFromClone = elFrom.cloneNode(true);\n  const elFromTween = options.tween === true ? elFrom.cloneNode(true) : void 0;\n  if (elFromTween !== void 0) {\n    elFromTween.className = elFromTween.classList.toString().split(' ').filter(c => /^bg-/.test(c) === false).join(' ');\n  }\n\n  // if the initial element is not going to be removed do not show the placeholder\n  options.hideFromClone === true && elFromClone.classList.add('q-morph--internal');\n\n  // prevent interaction with placeholder\n  elFromClone.setAttribute('aria-hidden', 'true');\n  elFromClone.style.transition = 'none';\n  elFromClone.style.animation = 'none';\n  elFromClone.style.pointerEvents = 'none';\n  elFromParent.insertBefore(elFromClone, elFromNext);\n\n  // we mark the element with its cleanup function\n  elFrom.qMorphCancel = () => {\n    cancelStatus = true;\n\n    // we clean the clone of the initial element\n    elFromClone.remove();\n    elFromTween !== void 0 && elFromTween.remove();\n    options.hideFromClone === true && elFromClone.classList.remove('q-morph--internal');\n\n    // we remove the cleanup function from the element\n    elFrom.qMorphCancel = void 0;\n  };\n\n  // will be called after Vue catches up with the changes done by _options.onToggle() function\n  const calculateFinalState = () => {\n    const elTo = getElement(elements.to);\n    if (cancelStatus === true || isValidElement(elTo) !== true) {\n      typeof elFrom.qMorphCancel === 'function' && elFrom.qMorphCancel();\n      return;\n    }\n    // we clean other morphs running on this element\n    elFrom !== elTo && typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel();\n\n    // we hide the final element and the clone of the initial element\n    // we don't hide the final element if we want both it and the animated one visible\n    options.keepToClone !== true && elTo.classList.add('q-morph--internal');\n    elFromClone.classList.add('q-morph--internal');\n\n    // we get the dimensions of the parent of the initial element after changes\n    // the difference is how much we should animate the clone\n    const {\n      width: elFromParentWidthAfter,\n      height: elFromParentHeightAfter\n    } = getAbsoluteSize(elFromParent);\n\n    // we get the dimensions of the parent of the final element before changes\n    const {\n      width: elToParentWidthBefore,\n      height: elToParentHeightBefore\n    } = getAbsoluteSize(elTo.parentNode);\n\n    // then we show the clone of the initial element if we don't want it hidden\n    options.hideFromClone !== true && elFromClone.classList.remove('q-morph--internal');\n\n    // we mark the element with its cleanup function\n    elTo.qMorphCancel = () => {\n      cancelStatus = true;\n\n      // we clean the clone of the initial element\n      elFromClone.remove();\n      elFromTween !== void 0 && elFromTween.remove();\n      options.hideFromClone === true && elFromClone.classList.remove('q-morph--internal');\n\n      // we show the final element\n      options.keepToClone !== true && elTo.classList.remove('q-morph--internal');\n\n      // we remove the cleanup function from the elements\n      elFrom.qMorphCancel = void 0;\n      elTo.qMorphCancel = void 0;\n    };\n\n    // will be called after waitFor (give time to render the final element)\n    const animate = () => {\n      if (cancelStatus === true) {\n        typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel();\n        return;\n      }\n\n      // now the animation starts, so we only need the clone\n      // of the initial element as a spacer\n      // we also hide it to calculate the dimensions of the\n      // parent of the final element after the changes\n      if (options.hideFromClone !== true) {\n        elFromClone.classList.add('q-morph--internal');\n        elFromClone.innerHTML = '';\n        elFromClone.style.left = 0;\n        elFromClone.style.right = 'unset';\n        elFromClone.style.top = 0;\n        elFromClone.style.bottom = 'unset';\n        elFromClone.style.transform = 'none';\n      }\n\n      // we show the final element\n      if (options.keepToClone !== true) {\n        elTo.classList.remove('q-morph--internal');\n      }\n\n      // we get the dimensions of the parent of the final element after changes\n      // the difference is how much we should animate the clone\n      const elToParent = elTo.parentNode;\n      const {\n        width: elToParentWidthAfter,\n        height: elToParentHeightAfter\n      } = getAbsoluteSize(elToParent);\n      const elToClone = elTo.cloneNode(options.keepToClone);\n      elToClone.setAttribute('aria-hidden', 'true');\n      if (options.keepToClone !== true) {\n        elToClone.style.left = 0;\n        elToClone.style.right = 'unset';\n        elToClone.style.top = 0;\n        elToClone.style.bottom = 'unset';\n        elToClone.style.transform = 'none';\n        elToClone.style.pointerEvents = 'none';\n      }\n      elToClone.classList.add('q-morph--internal');\n\n      // if elFrom is the same as elTo the next element is elFromClone\n      const elToNext = elTo === elFrom && elFromParent === elToParent ? elFromClone : elTo.nextElementSibling;\n      elToParent.insertBefore(elToClone, elToNext);\n      const {\n        borderWidth: elToBorderWidth,\n        borderStyle: elToBorderStyle,\n        borderColor: elToBorderColor,\n        borderRadius: elToBorderRadius,\n        backgroundColor: elToBackground,\n        transform: elToTransform,\n        position: elToPositioningType,\n        cssText: elToCssText\n      } = getComputedStyle(elTo, ['borderWidth', 'borderStyle', 'borderColor', 'borderRadius', 'backgroundColor', 'transform', 'position', 'cssText']);\n      const elToClassSaved = elTo.classList.toString();\n      const elToStyleSaved = elTo.style.cssText;\n\n      // we set the computed styles on the element (to be able to remove classes)\n      elTo.style.cssText = elToCssText;\n      elTo.style.transform = 'none';\n      elTo.style.animation = 'none';\n      elTo.style.transition = 'none';\n      // we strip the background classes (background color can no longer be animated if !important is used)\n      elTo.className = elToClassSaved.split(' ').filter(c => /^bg-/.test(c) === false).join(' ');\n      const elToPosition = getAbsolutePosition(elTo, options.resize);\n      const deltaX = elFromPosition.left - elToPosition.left;\n      const deltaY = elFromPosition.top - elToPosition.top;\n      const scaleX = elFromPosition.width / (elToPosition.width > 0 ? elToPosition.width : 10);\n      const scaleY = elFromPosition.height / (elToPosition.height > 0 ? elToPosition.height : 100);\n      const elFromParentWidthDiff = elFromParentWidthBefore - elFromParentWidthAfter;\n      const elFromParentHeightDiff = elFromParentHeightBefore - elFromParentHeightAfter;\n      const elToParentWidthDiff = elToParentWidthAfter - elToParentWidthBefore;\n      const elToParentHeightDiff = elToParentHeightAfter - elToParentHeightBefore;\n      const elFromCloneWidth = Math.max(elFromPosition.widthM, elFromParentWidthDiff);\n      const elFromCloneHeight = Math.max(elFromPosition.heightM, elFromParentHeightDiff);\n      const elToCloneWidth = Math.max(elToPosition.widthM, elToParentWidthDiff);\n      const elToCloneHeight = Math.max(elToPosition.heightM, elToParentHeightDiff);\n      const elSharedSize = elFrom === elTo && ['absolute', 'fixed'].includes(elToPositioningType) === false && ['absolute', 'fixed'].includes(elFromPositioningType) === false;\n\n      // if the final element has fixed position or if a parent\n      // has fixed position we need to animate it as fixed\n      let elToNeedsFixedPosition = elToPositioningType === 'fixed';\n      let parent = elToParent;\n      while (elToNeedsFixedPosition !== true && parent !== document) {\n        elToNeedsFixedPosition = window.getComputedStyle(parent).position === 'fixed';\n        parent = parent.parentNode;\n      }\n\n      // we show the spacer for the initial element\n      if (options.hideFromClone !== true) {\n        elFromClone.style.display = 'block';\n        elFromClone.style.flex = '0 0 auto';\n        elFromClone.style.opacity = 0;\n        elFromClone.style.minWidth = 'unset';\n        elFromClone.style.maxWidth = 'unset';\n        elFromClone.style.minHeight = 'unset';\n        elFromClone.style.maxHeight = 'unset';\n        elFromClone.classList.remove('q-morph--internal');\n      }\n\n      // we show the spacer for the final element\n      if (options.keepToClone !== true) {\n        elToClone.style.display = 'block';\n        elToClone.style.flex = '0 0 auto';\n        elToClone.style.opacity = 0;\n        elToClone.style.minWidth = 'unset';\n        elToClone.style.maxWidth = 'unset';\n        elToClone.style.minHeight = 'unset';\n        elToClone.style.maxHeight = 'unset';\n      }\n      elToClone.classList.remove('q-morph--internal');\n\n      // we apply classes specified by user\n      if (typeof options.classes === 'string') {\n        elTo.className += ' ' + options.classes;\n      }\n\n      // we apply styles specified by user\n      if (typeof options.style === 'string') {\n        elTo.style.cssText += ' ' + options.style;\n      } else if (isObject(options.style) === true) {\n        for (const prop in options.style) {\n          elTo.style[prop] = options.style[prop];\n        }\n      }\n      const elFromZIndex = getMaxZIndex(elFromClone);\n      const elToZIndex = getMaxZIndex(elTo);\n\n      // we position the morphing element\n      // if we use fixed position for the final element we need to adjust for scroll\n      const documentScroll = elToNeedsFixedPosition === true ? document.documentElement : {\n        scrollLeft: 0,\n        scrollTop: 0\n      };\n      elTo.style.position = elToNeedsFixedPosition === true ? 'fixed' : 'absolute';\n      elTo.style.left = `${elToPosition.left - documentScroll.scrollLeft}px`;\n      elTo.style.right = 'unset';\n      elTo.style.top = `${elToPosition.top - documentScroll.scrollTop}px`;\n      elTo.style.margin = 0;\n      if (options.resize === true) {\n        elTo.style.minWidth = 'unset';\n        elTo.style.maxWidth = 'unset';\n        elTo.style.minHeight = 'unset';\n        elTo.style.maxHeight = 'unset';\n        elTo.style.overflow = 'hidden';\n        elTo.style.overflowX = 'hidden';\n        elTo.style.overflowY = 'hidden';\n      }\n      document.body.appendChild(elTo);\n      if (elFromTween !== void 0) {\n        elFromTween.style.cssText = elFromCssText;\n        elFromTween.style.transform = 'none';\n        elFromTween.style.animation = 'none';\n        elFromTween.style.transition = 'none';\n        elFromTween.style.position = elTo.style.position;\n        elFromTween.style.left = `${elFromPosition.left - documentScroll.scrollLeft}px`;\n        elFromTween.style.right = 'unset';\n        elFromTween.style.top = `${elFromPosition.top - documentScroll.scrollTop}px`;\n        elFromTween.style.margin = 0;\n        elFromTween.style.pointerEvents = 'none';\n        if (options.resize === true) {\n          elFromTween.style.minWidth = 'unset';\n          elFromTween.style.maxWidth = 'unset';\n          elFromTween.style.minHeight = 'unset';\n          elFromTween.style.maxHeight = 'unset';\n          elFromTween.style.overflow = 'hidden';\n          elFromTween.style.overflowX = 'hidden';\n          elFromTween.style.overflowY = 'hidden';\n        }\n        document.body.appendChild(elFromTween);\n      }\n      const commonCleanup = aborted => {\n        // we put the element back in it's place\n        // and restore the styles and classes\n        if (elFrom === elTo && endElementTo !== true) {\n          elTo.style.cssText = elFromStyleSaved;\n          elTo.className = elFromClassSaved;\n        } else {\n          elTo.style.cssText = elToStyleSaved;\n          elTo.className = elToClassSaved;\n        }\n        elToClone.parentNode === elToParent && elToParent.insertBefore(elTo, elToClone);\n\n        // we clean the spacers\n        elFromClone.remove();\n        elToClone.remove();\n        elFromTween !== void 0 && elFromTween.remove();\n\n        // cancel will be no longer available\n        cancel = () => false;\n        elFrom.qMorphCancel = void 0;\n        elTo.qMorphCancel = void 0;\n\n        // we are ready\n        if (typeof options.onEnd === 'function') {\n          options.onEnd(endElementTo === true ? 'to' : 'from', aborted === true);\n        }\n      };\n      if (options.useCSS !== true && typeof elTo.animate === 'function') {\n        const resizeFrom = options.resize === true ? {\n          transform: `translate(${deltaX}px, ${deltaY}px)`,\n          width: `${elFromCloneWidth}px`,\n          height: `${elFromCloneHeight}px`\n        } : {\n          transform: `translate(${deltaX}px, ${deltaY}px) scale(${scaleX}, ${scaleY})`\n        };\n        const resizeTo = options.resize === true ? {\n          width: `${elToCloneWidth}px`,\n          height: `${elToCloneHeight}px`\n        } : {};\n        const resizeFromTween = options.resize === true ? {\n          width: `${elFromCloneWidth}px`,\n          height: `${elFromCloneHeight}px`\n        } : {};\n        const resizeToTween = options.resize === true ? {\n          transform: `translate(${-1 * deltaX}px, ${-1 * deltaY}px)`,\n          width: `${elToCloneWidth}px`,\n          height: `${elToCloneHeight}px`\n        } : {\n          transform: `translate(${-1 * deltaX}px, ${-1 * deltaY}px) scale(${1 / scaleX}, ${1 / scaleY})`\n        };\n        const tweenFrom = elFromTween !== void 0 ? {\n          opacity: options.tweenToOpacity\n        } : {\n          backgroundColor: elFromBackground\n        };\n        const tweenTo = elFromTween !== void 0 ? {\n          opacity: 1\n        } : {\n          backgroundColor: elToBackground\n        };\n        animationTo = elTo.animate([{\n          margin: 0,\n          borderWidth: elFromBorderWidth,\n          borderStyle: elFromBorderStyle,\n          borderColor: elFromBorderColor,\n          borderRadius: elFromBorderRadius,\n          zIndex: elFromZIndex,\n          transformOrigin: '0 0',\n          ...resizeFrom,\n          ...tweenFrom\n        }, {\n          margin: 0,\n          borderWidth: elToBorderWidth,\n          borderStyle: elToBorderStyle,\n          borderColor: elToBorderColor,\n          borderRadius: elToBorderRadius,\n          zIndex: elToZIndex,\n          transformOrigin: '0 0',\n          transform: elToTransform,\n          ...resizeTo,\n          ...tweenTo\n        }], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        });\n        animationFromTween = elFromTween === void 0 ? void 0 : elFromTween.animate([{\n          opacity: options.tweenFromOpacity,\n          margin: 0,\n          borderWidth: elFromBorderWidth,\n          borderStyle: elFromBorderStyle,\n          borderColor: elFromBorderColor,\n          borderRadius: elFromBorderRadius,\n          zIndex: elFromZIndex,\n          transformOrigin: '0 0',\n          transform: elFromTransform,\n          ...resizeFromTween\n        }, {\n          opacity: 0,\n          margin: 0,\n          borderWidth: elToBorderWidth,\n          borderStyle: elToBorderStyle,\n          borderColor: elToBorderColor,\n          borderRadius: elToBorderRadius,\n          zIndex: elToZIndex,\n          transformOrigin: '0 0',\n          ...resizeToTween\n        }], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        });\n        animationFromClone = options.hideFromClone === true || elSharedSize === true ? void 0 : elFromClone.animate([{\n          margin: `${elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0}px ${elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0}px`,\n          width: `${elFromCloneWidth + elFromPosition.marginH}px`,\n          height: `${elFromCloneHeight + elFromPosition.marginV}px`\n        }, {\n          margin: 0,\n          width: 0,\n          height: 0\n        }], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        });\n        animationToClone = options.keepToClone === true ? void 0 : elToClone.animate([elSharedSize === true ? {\n          margin: `${elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0}px ${elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0}px`,\n          width: `${elFromCloneWidth + elFromPosition.marginH}px`,\n          height: `${elFromCloneHeight + elFromPosition.marginV}px`\n        } : {\n          margin: 0,\n          width: 0,\n          height: 0\n        }, {\n          margin: `${elToParentHeightDiff < 0 ? elToParentHeightDiff / 2 : 0}px ${elToParentWidthDiff < 0 ? elToParentWidthDiff / 2 : 0}px`,\n          width: `${elToCloneWidth + elToPosition.marginH}px`,\n          height: `${elToCloneHeight + elToPosition.marginV}px`\n        }], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        });\n        const cleanup = abort => {\n          animationFromClone !== void 0 && animationFromClone.cancel();\n          animationFromTween !== void 0 && animationFromTween.cancel();\n          animationToClone !== void 0 && animationToClone.cancel();\n          animationTo.cancel();\n          animationTo.removeEventListener('finish', cleanup);\n          animationTo.removeEventListener('cancel', cleanup);\n          commonCleanup(abort);\n\n          // we clean the animations\n          animationFromClone = void 0;\n          animationFromTween = void 0;\n          animationToClone = void 0;\n          animationTo = void 0;\n        };\n        elFrom.qMorphCancel = () => {\n          elFrom.qMorphCancel = void 0;\n          cancelStatus = true;\n          cleanup();\n        };\n        elTo.qMorphCancel = () => {\n          elTo.qMorphCancel = void 0;\n          cancelStatus = true;\n          cleanup();\n        };\n        animationTo.addEventListener('finish', cleanup);\n        animationTo.addEventListener('cancel', cleanup);\n        cancel = abort => {\n          // we are not in a morph that we can cancel\n          if (cancelStatus === true || animationTo === void 0) {\n            return false;\n          }\n          if (abort === true) {\n            cleanup(true);\n            return true;\n          }\n          endElementTo = endElementTo !== true;\n          animationFromClone !== void 0 && animationFromClone.reverse();\n          animationFromTween !== void 0 && animationFromTween.reverse();\n          animationToClone !== void 0 && animationToClone.reverse();\n          animationTo.reverse();\n          return true;\n        };\n      } else {\n        const qAnimId = `q-morph-anim-${++id}`;\n        const style = document.createElement('style');\n        const resizeFrom = options.resize === true ? `\n            transform: translate(${deltaX}px, ${deltaY}px);\n            width: ${elFromCloneWidth}px;\n            height: ${elFromCloneHeight}px;\n          ` : `transform: translate(${deltaX}px, ${deltaY}px) scale(${scaleX}, ${scaleY});`;\n        const resizeTo = options.resize === true ? `\n            width: ${elToCloneWidth}px;\n            height: ${elToCloneHeight}px;\n          ` : '';\n        const resizeFromTween = options.resize === true ? `\n            width: ${elFromCloneWidth}px;\n            height: ${elFromCloneHeight}px;\n          ` : '';\n        const resizeToTween = options.resize === true ? `\n            transform: translate(${-1 * deltaX}px, ${-1 * deltaY}px);\n            width: ${elToCloneWidth}px;\n            height: ${elToCloneHeight}px;\n          ` : `transform: translate(${-1 * deltaX}px, ${-1 * deltaY}px) scale(${1 / scaleX}, ${1 / scaleY});`;\n        const tweenFrom = elFromTween !== void 0 ? `opacity: ${options.tweenToOpacity};` : `background-color: ${elFromBackground};`;\n        const tweenTo = elFromTween !== void 0 ? 'opacity: 1;' : `background-color: ${elToBackground};`;\n        const keyframesFromTween = elFromTween === void 0 ? '' : `\n            @keyframes ${qAnimId}-from-tween {\n              0% {\n                opacity: ${options.tweenFromOpacity};\n                margin: 0;\n                border-width: ${elFromBorderWidth};\n                border-style: ${elFromBorderStyle};\n                border-color: ${elFromBorderColor};\n                border-radius: ${elFromBorderRadius};\n                z-index: ${elFromZIndex};\n                transform-origin: 0 0;\n                transform: ${elFromTransform};\n                ${resizeFromTween}\n              }\n\n              100% {\n                opacity: 0;\n                margin: 0;\n                border-width: ${elToBorderWidth};\n                border-style: ${elToBorderStyle};\n                border-color: ${elToBorderColor};\n                border-radius: ${elToBorderRadius};\n                z-index: ${elToZIndex};\n                transform-origin: 0 0;\n                ${resizeToTween}\n              }\n            }\n          `;\n        const keyframesFrom = options.hideFromClone === true || elSharedSize === true ? '' : `\n            @keyframes ${qAnimId}-from {\n              0% {\n                margin: ${elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0}px ${elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0}px;\n                width: ${elFromCloneWidth + elFromPosition.marginH}px;\n                height: ${elFromCloneHeight + elFromPosition.marginV}px;\n              }\n\n              100% {\n                margin: 0;\n                width: 0;\n                height: 0;\n              }\n            }\n          `;\n        const keyframeToStart = elSharedSize === true ? `\n            margin: ${elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0}px ${elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0}px;\n            width: ${elFromCloneWidth + elFromPosition.marginH}px;\n            height: ${elFromCloneHeight + elFromPosition.marginV}px;\n          ` : `\n            margin: 0;\n            width: 0;\n            height: 0;\n          `;\n        const keyframesTo = options.keepToClone === true ? '' : `\n            @keyframes ${qAnimId}-to {\n              0% {\n                ${keyframeToStart}\n              }\n\n              100% {\n                margin: ${elToParentHeightDiff < 0 ? elToParentHeightDiff / 2 : 0}px ${elToParentWidthDiff < 0 ? elToParentWidthDiff / 2 : 0}px;\n                width: ${elToCloneWidth + elToPosition.marginH}px;\n                height: ${elToCloneHeight + elToPosition.marginV}px;\n              }\n            }\n          `;\n        style.innerHTML = `\n          @keyframes ${qAnimId} {\n            0% {\n              margin: 0;\n              border-width: ${elFromBorderWidth};\n              border-style: ${elFromBorderStyle};\n              border-color: ${elFromBorderColor};\n              border-radius: ${elFromBorderRadius};\n              background-color: ${elFromBackground};\n              z-index: ${elFromZIndex};\n              transform-origin: 0 0;\n              ${resizeFrom}\n              ${tweenFrom}\n            }\n\n            100% {\n              margin: 0;\n              border-width: ${elToBorderWidth};\n              border-style: ${elToBorderStyle};\n              border-color: ${elToBorderColor};\n              border-radius: ${elToBorderRadius};\n              background-color: ${elToBackground};\n              z-index: ${elToZIndex};\n              transform-origin: 0 0;\n              transform: ${elToTransform};\n              ${resizeTo}\n              ${tweenTo}\n            }\n          }\n\n          ${keyframesFrom}\n\n          ${keyframesFromTween}\n\n          ${keyframesTo}\n        `;\n        document.head.appendChild(style);\n        let animationDirection = 'normal';\n        elFromClone.style.animation = `${options.duration}ms ${options.easing} ${options.delay}ms ${animationDirection} ${options.fill} ${qAnimId}-from`;\n        if (elFromTween !== void 0) {\n          elFromTween.style.animation = `${options.duration}ms ${options.easing} ${options.delay}ms ${animationDirection} ${options.fill} ${qAnimId}-from-tween`;\n        }\n        elToClone.style.animation = `${options.duration}ms ${options.easing} ${options.delay}ms ${animationDirection} ${options.fill} ${qAnimId}-to`;\n        elTo.style.animation = `${options.duration}ms ${options.easing} ${options.delay}ms ${animationDirection} ${options.fill} ${qAnimId}`;\n        const cleanup = evt => {\n          if (evt === Object(evt) && evt.animationName !== qAnimId) {\n            return;\n          }\n          elTo.removeEventListener('animationend', cleanup);\n          elTo.removeEventListener('animationcancel', cleanup);\n          commonCleanup();\n\n          // we clean the animations\n          style.remove();\n        };\n        elFrom.qMorphCancel = () => {\n          elFrom.qMorphCancel = void 0;\n          cancelStatus = true;\n          cleanup();\n        };\n        elTo.qMorphCancel = () => {\n          elTo.qMorphCancel = void 0;\n          cancelStatus = true;\n          cleanup();\n        };\n        elTo.addEventListener('animationend', cleanup);\n        elTo.addEventListener('animationcancel', cleanup);\n        cancel = abort => {\n          // we are not in a morph that we can cancel\n          if (cancelStatus === true || !elTo || !elFromClone || !elToClone) {\n            return false;\n          }\n          if (abort === true) {\n            cleanup();\n            return true;\n          }\n          endElementTo = endElementTo !== true;\n          animationDirection = animationDirection === 'normal' ? 'reverse' : 'normal';\n          elFromClone.style.animationDirection = animationDirection;\n          elFromTween.style.animationDirection = animationDirection;\n          elToClone.style.animationDirection = animationDirection;\n          elTo.style.animationDirection = animationDirection;\n          return true;\n        };\n      }\n    };\n    if (options.waitFor > 0 || options.waitFor === 'transitionend' || options.waitFor === Object(options.waitFor) && typeof options.waitFor.then === 'function') {\n      const delayPromise = options.waitFor > 0 ? new Promise(resolve => setTimeout(resolve, options.waitFor)) : options.waitFor === 'transitionend' ? new Promise(resolve => {\n        const endFn = () => {\n          if (timer !== null) {\n            clearTimeout(timer);\n            timer = null;\n          }\n          if (elTo) {\n            elTo.removeEventListener('transitionend', endFn);\n            elTo.removeEventListener('transitioncancel', endFn);\n          }\n          resolve();\n        };\n        let timer = setTimeout(endFn, 400);\n        elTo.addEventListener('transitionend', endFn);\n        elTo.addEventListener('transitioncancel', endFn);\n      }) : options.waitFor;\n      delayPromise.then(animate).catch(() => {\n        typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel();\n      });\n    } else {\n      animate();\n    }\n  };\n  typeof _options.onToggle === 'function' && _options.onToggle();\n  requestAnimationFrame(calculateFinalState);\n\n  // we return the cancel function\n  // returns:\n  //   false if the cancel cannot be performed (the morph ended already or has not started)\n  //   true else\n  return abort => cancel(abort);\n}","map":{"version":3,"names":["isObject","id","offsetBase","getAbsolutePosition","el","resize","document","createElement","style","cssText","body","appendChild","boundingRect","getBoundingClientRect","baseRect","marginLeft","marginRight","marginTop","marginBottom","window","getComputedStyle","marginH","parseInt","marginV","left","top","width","right","height","bottom","widthM","heightM","getAbsoluteSize","scrollWidth","scrollHeight","styleEdges","styleBorderRadiuses","reStyleSkipKey","reStyleSkipRule","props","fixed","i","length","prop","styleLen","val","test","indexOf","suffix","replace","j","subProp","val1","val2","split","filter","join","zIndexPositions","getMaxZIndex","elStart","maxIndex","position","zIndex","zIndexNum","Number","includes","parentNode","normalizeElements","opts","from","to","normalizeOptions","options","duration","onEnd","waitFor","isNaN","easing","delay","fill","useCSS","usecss","hideFromClone","hidefromclone","keepToClone","keeptoclone","tween","tweenFromOpacity","parseFloat","tweenToOpacity","getElement","element","type","querySelector","isValidElement","ownerDocument","morph","_options","cancel","cancelStatus","endElementTo","elements","elFrom","qMorphCancel","animationFromClone","animationFromTween","animationToClone","animationTo","elFromParent","elFromNext","nextElementSibling","elFromPosition","elFromParentWidthBefore","elFromParentHeightBefore","borderWidth","elFromBorderWidth","borderStyle","elFromBorderStyle","borderColor","elFromBorderColor","borderRadius","elFromBorderRadius","backgroundColor","elFromBackground","transform","elFromTransform","elFromPositioningType","elFromCssText","elFromClassSaved","classList","toString","elFromStyleSaved","elFromClone","cloneNode","elFromTween","className","c","add","setAttribute","transition","animation","pointerEvents","insertBefore","remove","calculateFinalState","elTo","elFromParentWidthAfter","elFromParentHeightAfter","elToParentWidthBefore","elToParentHeightBefore","animate","innerHTML","elToParent","elToParentWidthAfter","elToParentHeightAfter","elToClone","elToNext","elToBorderWidth","elToBorderStyle","elToBorderColor","elToBorderRadius","elToBackground","elToTransform","elToPositioningType","elToCssText","elToClassSaved","elToStyleSaved","elToPosition","deltaX","deltaY","scaleX","scaleY","elFromParentWidthDiff","elFromParentHeightDiff","elToParentWidthDiff","elToParentHeightDiff","elFromCloneWidth","Math","max","elFromCloneHeight","elToCloneWidth","elToCloneHeight","elSharedSize","elToNeedsFixedPosition","parent","display","flex","opacity","minWidth","maxWidth","minHeight","maxHeight","classes","elFromZIndex","elToZIndex","documentScroll","documentElement","scrollLeft","scrollTop","margin","overflow","overflowX","overflowY","commonCleanup","aborted","resizeFrom","resizeTo","resizeFromTween","resizeToTween","tweenFrom","tweenTo","transformOrigin","cleanup","abort","removeEventListener","addEventListener","reverse","qAnimId","keyframesFromTween","keyframesFrom","keyframeToStart","keyframesTo","head","animationDirection","evt","Object","animationName","then","delayPromise","Promise","resolve","setTimeout","endFn","timer","clearTimeout","catch","onToggle","requestAnimationFrame"],"sources":["D:/LearnVueJS/Vue3/Projects/fa-sop-online/node_modules/quasar/src/utils/morph.js"],"sourcesContent":["import { isObject } from './is'\n\nlet id = 0\nlet offsetBase = void 0\n\nfunction getAbsolutePosition (el, resize) {\n  if (offsetBase === void 0) {\n    offsetBase = document.createElement('div')\n    offsetBase.style.cssText = 'position: absolute; left: 0; top: 0'\n    document.body.appendChild(offsetBase)\n  }\n\n  const boundingRect = el.getBoundingClientRect()\n  const baseRect = offsetBase.getBoundingClientRect()\n  const { marginLeft, marginRight, marginTop, marginBottom } = window.getComputedStyle(el)\n  const marginH = parseInt(marginLeft, 10) + parseInt(marginRight, 10)\n  const marginV = parseInt(marginTop, 10) + parseInt(marginBottom, 10)\n\n  return {\n    left: boundingRect.left - baseRect.left,\n    top: boundingRect.top - baseRect.top,\n    width: boundingRect.right - boundingRect.left,\n    height: boundingRect.bottom - boundingRect.top,\n    widthM: boundingRect.right - boundingRect.left + (resize === true ? 0 : marginH),\n    heightM: boundingRect.bottom - boundingRect.top + (resize === true ? 0 : marginV),\n    marginH: resize === true ? marginH : 0,\n    marginV: resize === true ? marginV : 0\n  }\n}\n\nfunction getAbsoluteSize (el) {\n  return {\n    width: el.scrollWidth,\n    height: el.scrollHeight\n  }\n}\n\n// firefox rulez\nconst styleEdges = [ 'Top', 'Right', 'Bottom', 'Left' ]\nconst styleBorderRadiuses = [ 'borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomRightRadius', 'borderBottomLeftRadius' ]\nconst reStyleSkipKey = /-block|-inline|block-|inline-/\nconst reStyleSkipRule = /(-block|-inline|block-|inline-).*:/\n\nfunction getComputedStyle (el, props) {\n  const style = window.getComputedStyle(el)\n  const fixed = {}\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[ i ]\n\n    if (style[ prop ] === '') {\n      if (prop === 'cssText') {\n        const styleLen = style.length\n        let val = ''\n\n        for (let i = 0; i < styleLen; i++) {\n          if (reStyleSkipKey.test(style[ i ]) !== true) {\n            val += style[ i ] + ': ' + style[ style[ i ] ] + '; '\n          }\n        }\n\n        fixed[ prop ] = val\n      }\n      else if ([ 'borderWidth', 'borderStyle', 'borderColor' ].indexOf(prop) > -1) {\n        const suffix = prop.replace('border', '')\n        let val = ''\n        for (let j = 0; j < styleEdges.length; j++) {\n          const subProp = 'border' + styleEdges[ j ] + suffix\n          val += style[ subProp ] + ' '\n        }\n        fixed[ prop ] = val\n      }\n      else if (prop === 'borderRadius') {\n        let val1 = ''\n        let val2 = ''\n        for (let j = 0; j < styleBorderRadiuses.length; j++) {\n          const val = style[ styleBorderRadiuses[ j ] ].split(' ')\n          val1 += val[ 0 ] + ' '\n          val2 += (val[ 1 ] === void 0 ? val[ 0 ] : val[ 1 ]) + ' '\n        }\n        fixed[ prop ] = val1 + '/ ' + val2\n      }\n      else {\n        fixed[ prop ] = style[ prop ]\n      }\n    }\n    else {\n      if (prop === 'cssText') {\n        fixed[ prop ] = style[ prop ]\n          .split(';')\n          .filter(val => reStyleSkipRule.test(val) !== true)\n          .join(';')\n      }\n      else {\n        fixed[ prop ] = style[ prop ]\n      }\n    }\n  }\n\n  return fixed\n}\n\nconst zIndexPositions = [ 'absolute', 'fixed', 'relative', 'sticky' ]\n\nfunction getMaxZIndex (elStart) {\n  let el = elStart\n  let maxIndex = 0\n\n  while (el !== null && el !== document) {\n    const { position, zIndex } = window.getComputedStyle(el)\n    const zIndexNum = Number(zIndex)\n\n    if (\n      zIndexNum > maxIndex\n      && (el === elStart || zIndexPositions.includes(position) === true)\n    ) {\n      maxIndex = zIndexNum\n    }\n\n    el = el.parentNode\n  }\n\n  return maxIndex\n}\n\nfunction normalizeElements (opts) {\n  return {\n    from: opts.from,\n    to: opts.to !== void 0\n      ? opts.to\n      : opts.from\n  }\n}\n\nfunction normalizeOptions (options) {\n  if (typeof options === 'number') {\n    options = {\n      duration: options\n    }\n  }\n  else if (typeof options === 'function') {\n    options = {\n      onEnd: options\n    }\n  }\n\n  return {\n    ...options,\n\n    waitFor: options.waitFor === void 0 ? 0 : options.waitFor,\n\n    duration: isNaN(options.duration) === true ? 300 : parseInt(options.duration, 10),\n    easing: typeof options.easing === 'string' && options.easing.length !== 0 ? options.easing : 'ease-in-out',\n    delay: isNaN(options.delay) === true ? 0 : parseInt(options.delay, 10),\n    fill: typeof options.fill === 'string' && options.fill.length !== 0 ? options.fill : 'none',\n\n    resize: options.resize === true,\n\n    // account for UMD too where modifiers will be lowercased to work\n    useCSS: options.useCSS === true || options.usecss === true,\n    // account for UMD too where modifiers will be lowercased to work\n    hideFromClone: options.hideFromClone === true || options.hidefromclone === true,\n    // account for UMD too where modifiers will be lowercased to work\n    keepToClone: options.keepToClone === true || options.keeptoclone === true,\n\n    tween: options.tween === true,\n    tweenFromOpacity: isNaN(options.tweenFromOpacity) === true ? 0.6 : parseFloat(options.tweenFromOpacity),\n    tweenToOpacity: isNaN(options.tweenToOpacity) === true ? 0.5 : parseFloat(options.tweenToOpacity)\n  }\n}\n\nfunction getElement (element) {\n  const type = typeof element\n\n  return type === 'function'\n    ? element()\n    : (\n        type === 'string'\n          ? document.querySelector(element)\n          : element\n      )\n}\n\nfunction isValidElement (element) {\n  return element\n    && element.ownerDocument === document\n    && element.parentNode !== null\n}\n\nexport default function morph (_options) {\n  let cancel = () => false\n  let cancelStatus = false\n  let endElementTo = true\n\n  const elements = normalizeElements(_options)\n  const options = normalizeOptions(_options)\n\n  const elFrom = getElement(elements.from)\n  if (isValidElement(elFrom) !== true) {\n    // we return a cancel function that return false, meaning the cancel function failed\n    return cancel\n  }\n  // we clean other morphs running on this element\n  typeof elFrom.qMorphCancel === 'function' && elFrom.qMorphCancel()\n\n  let animationFromClone = void 0\n  let animationFromTween = void 0\n  let animationToClone = void 0\n  let animationTo = void 0\n\n  const elFromParent = elFrom.parentNode\n  const elFromNext = elFrom.nextElementSibling\n\n  // we get the dimensions and characteristics\n  // of the parent of the initial element before changes\n  const elFromPosition = getAbsolutePosition(elFrom, options.resize)\n  const {\n    width: elFromParentWidthBefore,\n    height: elFromParentHeightBefore\n  } = getAbsoluteSize(elFromParent)\n  const {\n    borderWidth: elFromBorderWidth,\n    borderStyle: elFromBorderStyle,\n    borderColor: elFromBorderColor,\n    borderRadius: elFromBorderRadius,\n    backgroundColor: elFromBackground,\n    transform: elFromTransform,\n    position: elFromPositioningType,\n    cssText: elFromCssText\n  } = getComputedStyle(elFrom, [ 'borderWidth', 'borderStyle', 'borderColor', 'borderRadius', 'backgroundColor', 'transform', 'position', 'cssText' ])\n  const elFromClassSaved = elFrom.classList.toString()\n  const elFromStyleSaved = elFrom.style.cssText\n\n  // we make a clone of the initial element and\n  // use it to display until the final element is ready\n  // and to change the occupied space during animation\n  const elFromClone = elFrom.cloneNode(true)\n  const elFromTween = options.tween === true ? elFrom.cloneNode(true) : void 0\n\n  if (elFromTween !== void 0) {\n    elFromTween.className = elFromTween.classList.toString().split(' ').filter(c => /^bg-/.test(c) === false).join(' ')\n  }\n\n  // if the initial element is not going to be removed do not show the placeholder\n  options.hideFromClone === true && elFromClone.classList.add('q-morph--internal')\n\n  // prevent interaction with placeholder\n  elFromClone.setAttribute('aria-hidden', 'true')\n  elFromClone.style.transition = 'none'\n  elFromClone.style.animation = 'none'\n  elFromClone.style.pointerEvents = 'none'\n  elFromParent.insertBefore(elFromClone, elFromNext)\n\n  // we mark the element with its cleanup function\n  elFrom.qMorphCancel = () => {\n    cancelStatus = true\n\n    // we clean the clone of the initial element\n    elFromClone.remove()\n    elFromTween !== void 0 && elFromTween.remove()\n\n    options.hideFromClone === true && elFromClone.classList.remove('q-morph--internal')\n\n    // we remove the cleanup function from the element\n    elFrom.qMorphCancel = void 0\n  }\n\n  // will be called after Vue catches up with the changes done by _options.onToggle() function\n  const calculateFinalState = () => {\n    const elTo = getElement(elements.to)\n    if (cancelStatus === true || isValidElement(elTo) !== true) {\n      typeof elFrom.qMorphCancel === 'function' && elFrom.qMorphCancel()\n\n      return\n    }\n    // we clean other morphs running on this element\n    elFrom !== elTo && typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel()\n\n    // we hide the final element and the clone of the initial element\n    // we don't hide the final element if we want both it and the animated one visible\n    options.keepToClone !== true && elTo.classList.add('q-morph--internal')\n    elFromClone.classList.add('q-morph--internal')\n\n    // we get the dimensions of the parent of the initial element after changes\n    // the difference is how much we should animate the clone\n    const {\n      width: elFromParentWidthAfter,\n      height: elFromParentHeightAfter\n    } = getAbsoluteSize(elFromParent)\n\n    // we get the dimensions of the parent of the final element before changes\n    const {\n      width: elToParentWidthBefore,\n      height: elToParentHeightBefore\n    } = getAbsoluteSize(elTo.parentNode)\n\n    // then we show the clone of the initial element if we don't want it hidden\n    options.hideFromClone !== true && elFromClone.classList.remove('q-morph--internal')\n\n    // we mark the element with its cleanup function\n    elTo.qMorphCancel = () => {\n      cancelStatus = true\n\n      // we clean the clone of the initial element\n      elFromClone.remove()\n      elFromTween !== void 0 && elFromTween.remove()\n\n      options.hideFromClone === true && elFromClone.classList.remove('q-morph--internal')\n\n      // we show the final element\n      options.keepToClone !== true && elTo.classList.remove('q-morph--internal')\n\n      // we remove the cleanup function from the elements\n      elFrom.qMorphCancel = void 0\n      elTo.qMorphCancel = void 0\n    }\n\n    // will be called after waitFor (give time to render the final element)\n    const animate = () => {\n      if (cancelStatus === true) {\n        typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel()\n\n        return\n      }\n\n      // now the animation starts, so we only need the clone\n      // of the initial element as a spacer\n      // we also hide it to calculate the dimensions of the\n      // parent of the final element after the changes\n      if (options.hideFromClone !== true) {\n        elFromClone.classList.add('q-morph--internal')\n        elFromClone.innerHTML = ''\n        elFromClone.style.left = 0\n        elFromClone.style.right = 'unset'\n        elFromClone.style.top = 0\n        elFromClone.style.bottom = 'unset'\n        elFromClone.style.transform = 'none'\n      }\n\n      // we show the final element\n      if (options.keepToClone !== true) {\n        elTo.classList.remove('q-morph--internal')\n      }\n\n      // we get the dimensions of the parent of the final element after changes\n      // the difference is how much we should animate the clone\n      const elToParent = elTo.parentNode\n      const {\n        width: elToParentWidthAfter,\n        height: elToParentHeightAfter\n      } = getAbsoluteSize(elToParent)\n\n      const elToClone = elTo.cloneNode(options.keepToClone)\n      elToClone.setAttribute('aria-hidden', 'true')\n      if (options.keepToClone !== true) {\n        elToClone.style.left = 0\n        elToClone.style.right = 'unset'\n        elToClone.style.top = 0\n        elToClone.style.bottom = 'unset'\n        elToClone.style.transform = 'none'\n        elToClone.style.pointerEvents = 'none'\n      }\n      elToClone.classList.add('q-morph--internal')\n\n      // if elFrom is the same as elTo the next element is elFromClone\n      const elToNext = elTo === elFrom && elFromParent === elToParent ? elFromClone : elTo.nextElementSibling\n      elToParent.insertBefore(elToClone, elToNext)\n\n      const {\n        borderWidth: elToBorderWidth,\n        borderStyle: elToBorderStyle,\n        borderColor: elToBorderColor,\n        borderRadius: elToBorderRadius,\n        backgroundColor: elToBackground,\n        transform: elToTransform,\n        position: elToPositioningType,\n        cssText: elToCssText\n      } = getComputedStyle(elTo, [ 'borderWidth', 'borderStyle', 'borderColor', 'borderRadius', 'backgroundColor', 'transform', 'position', 'cssText' ])\n      const elToClassSaved = elTo.classList.toString()\n      const elToStyleSaved = elTo.style.cssText\n\n      // we set the computed styles on the element (to be able to remove classes)\n      elTo.style.cssText = elToCssText\n      elTo.style.transform = 'none'\n      elTo.style.animation = 'none'\n      elTo.style.transition = 'none'\n      // we strip the background classes (background color can no longer be animated if !important is used)\n      elTo.className = elToClassSaved.split(' ').filter(c => /^bg-/.test(c) === false).join(' ')\n\n      const elToPosition = getAbsolutePosition(elTo, options.resize)\n\n      const deltaX = elFromPosition.left - elToPosition.left\n      const deltaY = elFromPosition.top - elToPosition.top\n      const scaleX = elFromPosition.width / (elToPosition.width > 0 ? elToPosition.width : 10)\n      const scaleY = elFromPosition.height / (elToPosition.height > 0 ? elToPosition.height : 100)\n\n      const elFromParentWidthDiff = elFromParentWidthBefore - elFromParentWidthAfter\n      const elFromParentHeightDiff = elFromParentHeightBefore - elFromParentHeightAfter\n      const elToParentWidthDiff = elToParentWidthAfter - elToParentWidthBefore\n      const elToParentHeightDiff = elToParentHeightAfter - elToParentHeightBefore\n\n      const elFromCloneWidth = Math.max(elFromPosition.widthM, elFromParentWidthDiff)\n      const elFromCloneHeight = Math.max(elFromPosition.heightM, elFromParentHeightDiff)\n      const elToCloneWidth = Math.max(elToPosition.widthM, elToParentWidthDiff)\n      const elToCloneHeight = Math.max(elToPosition.heightM, elToParentHeightDiff)\n\n      const elSharedSize = elFrom === elTo\n        && [ 'absolute', 'fixed' ].includes(elToPositioningType) === false\n        && [ 'absolute', 'fixed' ].includes(elFromPositioningType) === false\n\n      // if the final element has fixed position or if a parent\n      // has fixed position we need to animate it as fixed\n      let elToNeedsFixedPosition = elToPositioningType === 'fixed'\n      let parent = elToParent\n      while (elToNeedsFixedPosition !== true && parent !== document) {\n        elToNeedsFixedPosition = window.getComputedStyle(parent).position === 'fixed'\n        parent = parent.parentNode\n      }\n\n      // we show the spacer for the initial element\n      if (options.hideFromClone !== true) {\n        elFromClone.style.display = 'block'\n        elFromClone.style.flex = '0 0 auto'\n        elFromClone.style.opacity = 0\n        elFromClone.style.minWidth = 'unset'\n        elFromClone.style.maxWidth = 'unset'\n        elFromClone.style.minHeight = 'unset'\n        elFromClone.style.maxHeight = 'unset'\n        elFromClone.classList.remove('q-morph--internal')\n      }\n\n      // we show the spacer for the final element\n      if (options.keepToClone !== true) {\n        elToClone.style.display = 'block'\n        elToClone.style.flex = '0 0 auto'\n        elToClone.style.opacity = 0\n        elToClone.style.minWidth = 'unset'\n        elToClone.style.maxWidth = 'unset'\n        elToClone.style.minHeight = 'unset'\n        elToClone.style.maxHeight = 'unset'\n      }\n      elToClone.classList.remove('q-morph--internal')\n\n      // we apply classes specified by user\n      if (typeof options.classes === 'string') {\n        elTo.className += ' ' + options.classes\n      }\n\n      // we apply styles specified by user\n      if (typeof options.style === 'string') {\n        elTo.style.cssText += ' ' + options.style\n      }\n      else if (isObject(options.style) === true) {\n        for (const prop in options.style) {\n          elTo.style[ prop ] = options.style[ prop ]\n        }\n      }\n\n      const elFromZIndex = getMaxZIndex(elFromClone)\n      const elToZIndex = getMaxZIndex(elTo)\n\n      // we position the morphing element\n      // if we use fixed position for the final element we need to adjust for scroll\n      const documentScroll = elToNeedsFixedPosition === true\n        ? document.documentElement\n        : { scrollLeft: 0, scrollTop: 0 }\n      elTo.style.position = elToNeedsFixedPosition === true ? 'fixed' : 'absolute'\n      elTo.style.left = `${ elToPosition.left - documentScroll.scrollLeft }px`\n      elTo.style.right = 'unset'\n      elTo.style.top = `${ elToPosition.top - documentScroll.scrollTop }px`\n      elTo.style.margin = 0\n\n      if (options.resize === true) {\n        elTo.style.minWidth = 'unset'\n        elTo.style.maxWidth = 'unset'\n        elTo.style.minHeight = 'unset'\n        elTo.style.maxHeight = 'unset'\n        elTo.style.overflow = 'hidden'\n        elTo.style.overflowX = 'hidden'\n        elTo.style.overflowY = 'hidden'\n      }\n\n      document.body.appendChild(elTo)\n\n      if (elFromTween !== void 0) {\n        elFromTween.style.cssText = elFromCssText\n        elFromTween.style.transform = 'none'\n        elFromTween.style.animation = 'none'\n        elFromTween.style.transition = 'none'\n\n        elFromTween.style.position = elTo.style.position\n        elFromTween.style.left = `${ elFromPosition.left - documentScroll.scrollLeft }px`\n        elFromTween.style.right = 'unset'\n        elFromTween.style.top = `${ elFromPosition.top - documentScroll.scrollTop }px`\n        elFromTween.style.margin = 0\n        elFromTween.style.pointerEvents = 'none'\n\n        if (options.resize === true) {\n          elFromTween.style.minWidth = 'unset'\n          elFromTween.style.maxWidth = 'unset'\n          elFromTween.style.minHeight = 'unset'\n          elFromTween.style.maxHeight = 'unset'\n          elFromTween.style.overflow = 'hidden'\n          elFromTween.style.overflowX = 'hidden'\n          elFromTween.style.overflowY = 'hidden'\n        }\n\n        document.body.appendChild(elFromTween)\n      }\n\n      const commonCleanup = aborted => {\n        // we put the element back in it's place\n        // and restore the styles and classes\n        if (elFrom === elTo && endElementTo !== true) {\n          elTo.style.cssText = elFromStyleSaved\n          elTo.className = elFromClassSaved\n        }\n        else {\n          elTo.style.cssText = elToStyleSaved\n          elTo.className = elToClassSaved\n        }\n        elToClone.parentNode === elToParent && elToParent.insertBefore(elTo, elToClone)\n\n        // we clean the spacers\n        elFromClone.remove()\n        elToClone.remove()\n        elFromTween !== void 0 && elFromTween.remove()\n\n        // cancel will be no longer available\n        cancel = () => false\n\n        elFrom.qMorphCancel = void 0\n        elTo.qMorphCancel = void 0\n\n        // we are ready\n        if (typeof options.onEnd === 'function') {\n          options.onEnd(endElementTo === true ? 'to' : 'from', aborted === true)\n        }\n      }\n\n      if (options.useCSS !== true && typeof elTo.animate === 'function') {\n        const resizeFrom = options.resize === true\n          ? {\n              transform: `translate(${ deltaX }px, ${ deltaY }px)`,\n              width: `${ elFromCloneWidth }px`,\n              height: `${ elFromCloneHeight }px`\n            }\n          : {\n              transform: `translate(${ deltaX }px, ${ deltaY }px) scale(${ scaleX }, ${ scaleY })`\n            }\n        const resizeTo = options.resize === true\n          ? {\n              width: `${ elToCloneWidth }px`,\n              height: `${ elToCloneHeight }px`\n            }\n          : {}\n        const resizeFromTween = options.resize === true\n          ? {\n              width: `${ elFromCloneWidth }px`,\n              height: `${ elFromCloneHeight }px`\n            }\n          : {}\n        const resizeToTween = options.resize === true\n          ? {\n              transform: `translate(${ -1 * deltaX }px, ${ -1 * deltaY }px)`,\n              width: `${ elToCloneWidth }px`,\n              height: `${ elToCloneHeight }px`\n            }\n          : {\n              transform: `translate(${ -1 * deltaX }px, ${ -1 * deltaY }px) scale(${ 1 / scaleX }, ${ 1 / scaleY })`\n            }\n        const tweenFrom = elFromTween !== void 0\n          ? { opacity: options.tweenToOpacity }\n          : { backgroundColor: elFromBackground }\n        const tweenTo = elFromTween !== void 0\n          ? { opacity: 1 }\n          : { backgroundColor: elToBackground }\n        animationTo = elTo.animate([\n          {\n            margin: 0,\n            borderWidth: elFromBorderWidth,\n            borderStyle: elFromBorderStyle,\n            borderColor: elFromBorderColor,\n            borderRadius: elFromBorderRadius,\n            zIndex: elFromZIndex,\n            transformOrigin: '0 0',\n            ...resizeFrom,\n            ...tweenFrom\n          },\n          {\n            margin: 0,\n            borderWidth: elToBorderWidth,\n            borderStyle: elToBorderStyle,\n            borderColor: elToBorderColor,\n            borderRadius: elToBorderRadius,\n            zIndex: elToZIndex,\n            transformOrigin: '0 0',\n            transform: elToTransform,\n            ...resizeTo,\n            ...tweenTo\n          }\n        ], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        })\n\n        animationFromTween = elFromTween === void 0 ? void 0 : elFromTween.animate([\n          {\n            opacity: options.tweenFromOpacity,\n            margin: 0,\n            borderWidth: elFromBorderWidth,\n            borderStyle: elFromBorderStyle,\n            borderColor: elFromBorderColor,\n            borderRadius: elFromBorderRadius,\n            zIndex: elFromZIndex,\n            transformOrigin: '0 0',\n            transform: elFromTransform,\n            ...resizeFromTween\n          },\n          {\n            opacity: 0,\n            margin: 0,\n            borderWidth: elToBorderWidth,\n            borderStyle: elToBorderStyle,\n            borderColor: elToBorderColor,\n            borderRadius: elToBorderRadius,\n            zIndex: elToZIndex,\n            transformOrigin: '0 0',\n            ...resizeToTween\n          }\n        ], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        })\n\n        animationFromClone = options.hideFromClone === true || elSharedSize === true ? void 0 : elFromClone.animate([\n          {\n            margin: `${ elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0 }px ${ elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0 }px`,\n            width: `${ elFromCloneWidth + elFromPosition.marginH }px`,\n            height: `${ elFromCloneHeight + elFromPosition.marginV }px`\n          },\n          {\n            margin: 0,\n            width: 0,\n            height: 0\n          }\n        ], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        })\n\n        animationToClone = options.keepToClone === true ? void 0 : elToClone.animate([\n          elSharedSize === true\n            ? {\n                margin: `${ elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0 }px ${ elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0 }px`,\n                width: `${ elFromCloneWidth + elFromPosition.marginH }px`,\n                height: `${ elFromCloneHeight + elFromPosition.marginV }px`\n              }\n            : {\n                margin: 0,\n                width: 0,\n                height: 0\n              },\n          {\n            margin: `${ elToParentHeightDiff < 0 ? elToParentHeightDiff / 2 : 0 }px ${ elToParentWidthDiff < 0 ? elToParentWidthDiff / 2 : 0 }px`,\n            width: `${ elToCloneWidth + elToPosition.marginH }px`,\n            height: `${ elToCloneHeight + elToPosition.marginV }px`\n          }\n        ], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        })\n\n        const cleanup = abort => {\n          animationFromClone !== void 0 && animationFromClone.cancel()\n          animationFromTween !== void 0 && animationFromTween.cancel()\n          animationToClone !== void 0 && animationToClone.cancel()\n          animationTo.cancel()\n\n          animationTo.removeEventListener('finish', cleanup)\n          animationTo.removeEventListener('cancel', cleanup)\n\n          commonCleanup(abort)\n\n          // we clean the animations\n          animationFromClone = void 0\n          animationFromTween = void 0\n          animationToClone = void 0\n          animationTo = void 0\n        }\n\n        elFrom.qMorphCancel = () => {\n          elFrom.qMorphCancel = void 0\n          cancelStatus = true\n          cleanup()\n        }\n        elTo.qMorphCancel = () => {\n          elTo.qMorphCancel = void 0\n          cancelStatus = true\n          cleanup()\n        }\n\n        animationTo.addEventListener('finish', cleanup)\n        animationTo.addEventListener('cancel', cleanup)\n\n        cancel = abort => {\n          // we are not in a morph that we can cancel\n          if (cancelStatus === true || animationTo === void 0) {\n            return false\n          }\n\n          if (abort === true) {\n            cleanup(true)\n            return true\n          }\n\n          endElementTo = endElementTo !== true\n\n          animationFromClone !== void 0 && animationFromClone.reverse()\n          animationFromTween !== void 0 && animationFromTween.reverse()\n          animationToClone !== void 0 && animationToClone.reverse()\n          animationTo.reverse()\n\n          return true\n        }\n      }\n      else {\n        const qAnimId = `q-morph-anim-${ ++id }`\n        const style = document.createElement('style')\n        const resizeFrom = options.resize === true\n          ? `\n            transform: translate(${ deltaX }px, ${ deltaY }px);\n            width: ${ elFromCloneWidth }px;\n            height: ${ elFromCloneHeight }px;\n          `\n          : `transform: translate(${ deltaX }px, ${ deltaY }px) scale(${ scaleX }, ${ scaleY });`\n        const resizeTo = options.resize === true\n          ? `\n            width: ${ elToCloneWidth }px;\n            height: ${ elToCloneHeight }px;\n          `\n          : ''\n        const resizeFromTween = options.resize === true\n          ? `\n            width: ${ elFromCloneWidth }px;\n            height: ${ elFromCloneHeight }px;\n          `\n          : ''\n        const resizeToTween = options.resize === true\n          ? `\n            transform: translate(${ -1 * deltaX }px, ${ -1 * deltaY }px);\n            width: ${ elToCloneWidth }px;\n            height: ${ elToCloneHeight }px;\n          `\n          : `transform: translate(${ -1 * deltaX }px, ${ -1 * deltaY }px) scale(${ 1 / scaleX }, ${ 1 / scaleY });`\n        const tweenFrom = elFromTween !== void 0\n          ? `opacity: ${ options.tweenToOpacity };`\n          : `background-color: ${ elFromBackground };`\n        const tweenTo = elFromTween !== void 0\n          ? 'opacity: 1;'\n          : `background-color: ${ elToBackground };`\n        const keyframesFromTween = elFromTween === void 0\n          ? ''\n          : `\n            @keyframes ${ qAnimId }-from-tween {\n              0% {\n                opacity: ${ options.tweenFromOpacity };\n                margin: 0;\n                border-width: ${ elFromBorderWidth };\n                border-style: ${ elFromBorderStyle };\n                border-color: ${ elFromBorderColor };\n                border-radius: ${ elFromBorderRadius };\n                z-index: ${ elFromZIndex };\n                transform-origin: 0 0;\n                transform: ${ elFromTransform };\n                ${ resizeFromTween }\n              }\n\n              100% {\n                opacity: 0;\n                margin: 0;\n                border-width: ${ elToBorderWidth };\n                border-style: ${ elToBorderStyle };\n                border-color: ${ elToBorderColor };\n                border-radius: ${ elToBorderRadius };\n                z-index: ${ elToZIndex };\n                transform-origin: 0 0;\n                ${ resizeToTween }\n              }\n            }\n          `\n        const keyframesFrom = options.hideFromClone === true || elSharedSize === true\n          ? ''\n          : `\n            @keyframes ${ qAnimId }-from {\n              0% {\n                margin: ${ elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0 }px ${ elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0 }px;\n                width: ${ elFromCloneWidth + elFromPosition.marginH }px;\n                height: ${ elFromCloneHeight + elFromPosition.marginV }px;\n              }\n\n              100% {\n                margin: 0;\n                width: 0;\n                height: 0;\n              }\n            }\n          `\n        const keyframeToStart = elSharedSize === true\n          ? `\n            margin: ${ elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0 }px ${ elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0 }px;\n            width: ${ elFromCloneWidth + elFromPosition.marginH }px;\n            height: ${ elFromCloneHeight + elFromPosition.marginV }px;\n          `\n          : `\n            margin: 0;\n            width: 0;\n            height: 0;\n          `\n        const keyframesTo = options.keepToClone === true\n          ? ''\n          : `\n            @keyframes ${ qAnimId }-to {\n              0% {\n                ${ keyframeToStart }\n              }\n\n              100% {\n                margin: ${ elToParentHeightDiff < 0 ? elToParentHeightDiff / 2 : 0 }px ${ elToParentWidthDiff < 0 ? elToParentWidthDiff / 2 : 0 }px;\n                width: ${ elToCloneWidth + elToPosition.marginH }px;\n                height: ${ elToCloneHeight + elToPosition.marginV }px;\n              }\n            }\n          `\n        style.innerHTML = `\n          @keyframes ${ qAnimId } {\n            0% {\n              margin: 0;\n              border-width: ${ elFromBorderWidth };\n              border-style: ${ elFromBorderStyle };\n              border-color: ${ elFromBorderColor };\n              border-radius: ${ elFromBorderRadius };\n              background-color: ${ elFromBackground };\n              z-index: ${ elFromZIndex };\n              transform-origin: 0 0;\n              ${ resizeFrom }\n              ${ tweenFrom }\n            }\n\n            100% {\n              margin: 0;\n              border-width: ${ elToBorderWidth };\n              border-style: ${ elToBorderStyle };\n              border-color: ${ elToBorderColor };\n              border-radius: ${ elToBorderRadius };\n              background-color: ${ elToBackground };\n              z-index: ${ elToZIndex };\n              transform-origin: 0 0;\n              transform: ${ elToTransform };\n              ${ resizeTo }\n              ${ tweenTo }\n            }\n          }\n\n          ${ keyframesFrom }\n\n          ${ keyframesFromTween }\n\n          ${ keyframesTo }\n        `\n        document.head.appendChild(style)\n\n        let animationDirection = 'normal'\n\n        elFromClone.style.animation = `${ options.duration }ms ${ options.easing } ${ options.delay }ms ${ animationDirection } ${ options.fill } ${ qAnimId }-from`\n        if (elFromTween !== void 0) {\n          elFromTween.style.animation = `${ options.duration }ms ${ options.easing } ${ options.delay }ms ${ animationDirection } ${ options.fill } ${ qAnimId }-from-tween`\n        }\n        elToClone.style.animation = `${ options.duration }ms ${ options.easing } ${ options.delay }ms ${ animationDirection } ${ options.fill } ${ qAnimId }-to`\n        elTo.style.animation = `${ options.duration }ms ${ options.easing } ${ options.delay }ms ${ animationDirection } ${ options.fill } ${ qAnimId }`\n\n        const cleanup = evt => {\n          if (evt === Object(evt) && evt.animationName !== qAnimId) {\n            return\n          }\n\n          elTo.removeEventListener('animationend', cleanup)\n          elTo.removeEventListener('animationcancel', cleanup)\n\n          commonCleanup()\n\n          // we clean the animations\n          style.remove()\n        }\n\n        elFrom.qMorphCancel = () => {\n          elFrom.qMorphCancel = void 0\n          cancelStatus = true\n          cleanup()\n        }\n        elTo.qMorphCancel = () => {\n          elTo.qMorphCancel = void 0\n          cancelStatus = true\n          cleanup()\n        }\n\n        elTo.addEventListener('animationend', cleanup)\n        elTo.addEventListener('animationcancel', cleanup)\n\n        cancel = abort => {\n          // we are not in a morph that we can cancel\n          if (cancelStatus === true || !elTo || !elFromClone || !elToClone) {\n            return false\n          }\n\n          if (abort === true) {\n            cleanup()\n\n            return true\n          }\n\n          endElementTo = endElementTo !== true\n\n          animationDirection = animationDirection === 'normal' ? 'reverse' : 'normal'\n\n          elFromClone.style.animationDirection = animationDirection\n          elFromTween.style.animationDirection = animationDirection\n          elToClone.style.animationDirection = animationDirection\n          elTo.style.animationDirection = animationDirection\n\n          return true\n        }\n      }\n    }\n\n    if (\n      options.waitFor > 0\n      || options.waitFor === 'transitionend'\n      || (options.waitFor === Object(options.waitFor) && typeof options.waitFor.then === 'function')\n    ) {\n      const delayPromise = options.waitFor > 0\n        ? new Promise(resolve => setTimeout(resolve, options.waitFor))\n        : (\n            options.waitFor === 'transitionend'\n              ? new Promise(resolve => {\n                const endFn = () => {\n                  if (timer !== null) {\n                    clearTimeout(timer)\n                    timer = null\n                  }\n\n                  if (elTo) {\n                    elTo.removeEventListener('transitionend', endFn)\n                    elTo.removeEventListener('transitioncancel', endFn)\n                  }\n\n                  resolve()\n                }\n\n                let timer = setTimeout(endFn, 400)\n\n                elTo.addEventListener('transitionend', endFn)\n                elTo.addEventListener('transitioncancel', endFn)\n              })\n              : options.waitFor\n          )\n\n      delayPromise\n        .then(animate)\n        .catch(() => {\n          typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel()\n        })\n    }\n    else {\n      animate()\n    }\n  }\n\n  typeof _options.onToggle === 'function' && _options.onToggle()\n  requestAnimationFrame(calculateFinalState)\n\n  // we return the cancel function\n  // returns:\n  //   false if the cancel cannot be performed (the morph ended already or has not started)\n  //   true else\n  return abort => cancel(abort)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}