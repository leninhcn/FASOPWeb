{"ast":null,"code":"export default {\n  methods: {\n    handleDragStart(node, ev) {\n      console.log('drag start', node);\n    },\n    handleDragEnter(draggingNode, dropNode, ev) {\n      console.log('tree drag enter:', dropNode.label);\n    },\n    handleDragLeave(draggingNode, dropNode, ev) {\n      console.log('tree drag leave:', dropNode.label);\n    },\n    handleDragOver(draggingNode, dropNode, ev) {\n      console.log('tree drag over:', dropNode.label);\n    },\n    handleDragEnd(draggingNode, dropNode, dropType, ev) {\n      console.log('tree drag end:', dropNode && dropNode.label, dropType);\n    },\n    handleDrop(draggingNode, dropNode, dropType, ev) {\n      console.log('tree drop:', dropNode.label, dropType);\n    },\n    allowDrop(draggingNode, dropNode, type) {\n      if (dropNode.data.label === 'Level two 3-1') {\n        return type !== 'inner';\n      } else {\n        return true;\n      }\n    },\n    allowDrag(draggingNode) {\n      return !draggingNode.data.label.includes('Level three 3-1-1');\n    }\n  },\n  data() {\n    return {\n      menu: [{\n        label: 'Level one 1',\n        children: [{\n          label: 'Level two 1-1',\n          children: [{\n            label: 'Level three 1-1-1'\n          }]\n        }]\n      }, {\n        label: 'Level one 2',\n        children: [{\n          label: 'Level two 2-1',\n          children: [{\n            label: 'Level three 2-1-1'\n          }]\n        }, {\n          label: 'Level two 2-2',\n          children: [{\n            label: 'Level three 2-2-1'\n          }]\n        }]\n      }, {\n        label: 'Level one 3',\n        children: [{\n          label: 'Level two 3-1',\n          children: [{\n            label: 'Level three 3-1-1'\n          }]\n        }, {\n          label: 'Level two 3-2',\n          children: [{\n            label: 'Level three 3-2-1'\n          }]\n        }]\n      }]\n    };\n  }\n};","map":{"version":3,"names":["methods","handleDragStart","node","ev","console","log","handleDragEnter","draggingNode","dropNode","label","handleDragLeave","handleDragOver","handleDragEnd","dropType","handleDrop","allowDrop","type","data","allowDrag","includes","menu","children"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\AdminArea\\MenuManage.vue"],"sourcesContent":["<template>\r\n    <div><template>\r\n            <el-tree :allow-drop=\"allowDrop\" :allow-drag=\"allowDrag\" :data=\"data\" draggable default-expand-all node-key=\"id\"\r\n                @node-drag-start=\"handleDragStart\" @node-drag-enter=\"handleDragEnter\" @node-drag-leave=\"handleDragLeave\"\r\n                @node-drag-over=\"handleDragOver\" @node-drag-end=\"handleDragEnd\" @node-drop=\"handleDrop\" />\r\n        </template></div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n    methods: {\r\n        handleDragStart(node, ev) {\r\n            console.log('drag start', node)\r\n        },\r\n        handleDragEnter(draggingNode, dropNode, ev) {\r\n            console.log('tree drag enter:', dropNode.label)\r\n        },\r\n        handleDragLeave(draggingNode, dropNode, ev) {\r\n            console.log('tree drag leave:', dropNode.label)\r\n        },\r\n        handleDragOver(draggingNode, dropNode, ev) { console.log('tree drag over:', dropNode.label) },\r\n        handleDragEnd(draggingNode, dropNode, dropType, ev) {\r\n            console.log('tree drag end:', dropNode && dropNode.label, dropType);\r\n        },\r\n        handleDrop(draggingNode, dropNode, dropType, ev) {\r\n            console.log('tree drop:', dropNode.label, dropType)\r\n        },\r\n        allowDrop(draggingNode, dropNode, type) {\r\n            if (dropNode.data.label === 'Level two 3-1') {\r\n                return type !== 'inner'\r\n            } else {\r\n                return true\r\n            }\r\n        },\r\n        allowDrag(draggingNode) {\r\n            return !draggingNode.data.label.includes('Level three 3-1-1')\r\n        },\r\n\r\n    }, data() {\r\n        return {\r\n            menu: [\r\n                {\r\n                    label: 'Level one 1',\r\n                    children: [\r\n                        {\r\n                            label: 'Level two 1-1',\r\n                            children: [\r\n                                {\r\n                                    label: 'Level three 1-1-1',\r\n                                },\r\n                            ],\r\n                        },\r\n                    ],\r\n                },\r\n                {\r\n                    label: 'Level one 2',\r\n                    children: [\r\n                        {\r\n                            label: 'Level two 2-1',\r\n                            children: [\r\n                                {\r\n                                    label: 'Level three 2-1-1',\r\n                                },\r\n                            ],\r\n                        },\r\n                        {\r\n                            label: 'Level two 2-2',\r\n                            children: [\r\n                                {\r\n                                    label: 'Level three 2-2-1',\r\n                                },\r\n                            ],\r\n                        },\r\n                    ],\r\n                },\r\n                {\r\n                    label: 'Level one 3',\r\n                    children: [\r\n                        {\r\n                            label: 'Level two 3-1',\r\n                            children: [\r\n                                {\r\n                                    label: 'Level three 3-1-1',\r\n                                },\r\n                            ],\r\n                        },\r\n                        {\r\n                            label: 'Level two 3-2',\r\n                            children: [\r\n                                {\r\n                                    label: 'Level three 3-2-1',\r\n                                },\r\n                            ],\r\n                        },\r\n                    ],\r\n                },\r\n            ]\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<style></style>"],"mappings":"AASA,eAAe;EAEXA,OAAO,EAAE;IACLC,eAAeA,CAACC,IAAI,EAAEC,EAAE,EAAE;MACtBC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,IAAI;IAClC,CAAC;IACDI,eAAeA,CAACC,YAAY,EAAEC,QAAQ,EAAEL,EAAE,EAAE;MACxCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEG,QAAQ,CAACC,KAAK;IAClD,CAAC;IACDC,eAAeA,CAACH,YAAY,EAAEC,QAAQ,EAAEL,EAAE,EAAE;MACxCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEG,QAAQ,CAACC,KAAK;IAClD,CAAC;IACDE,cAAcA,CAACJ,YAAY,EAAEC,QAAQ,EAAEL,EAAE,EAAE;MAAEC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEG,QAAQ,CAACC,KAAK;IAAE,CAAC;IAC7FG,aAAaA,CAACL,YAAY,EAAEC,QAAQ,EAAEK,QAAQ,EAAEV,EAAE,EAAE;MAChDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEG,QAAO,IAAKA,QAAQ,CAACC,KAAK,EAAEI,QAAQ,CAAC;IACvE,CAAC;IACDC,UAAUA,CAACP,YAAY,EAAEC,QAAQ,EAAEK,QAAQ,EAAEV,EAAE,EAAE;MAC7CC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEG,QAAQ,CAACC,KAAK,EAAEI,QAAQ;IACtD,CAAC;IACDE,SAASA,CAACR,YAAY,EAAEC,QAAQ,EAAEQ,IAAI,EAAE;MACpC,IAAIR,QAAQ,CAACS,IAAI,CAACR,KAAI,KAAM,eAAe,EAAE;QACzC,OAAOO,IAAG,KAAM,OAAM;MAC1B,OAAO;QACH,OAAO,IAAG;MACd;IACJ,CAAC;IACDE,SAASA,CAACX,YAAY,EAAE;MACpB,OAAO,CAACA,YAAY,CAACU,IAAI,CAACR,KAAK,CAACU,QAAQ,CAAC,mBAAmB;IAChE;EAEJ,CAAC;EAAEF,IAAIA,CAAA,EAAG;IACN,OAAO;MACHG,IAAI,EAAE,CACF;QACIX,KAAK,EAAE,aAAa;QACpBY,QAAQ,EAAE,CACN;UACIZ,KAAK,EAAE,eAAe;UACtBY,QAAQ,EAAE,CACN;YACIZ,KAAK,EAAE;UACX,CAAC;QAET,CAAC;MAET,CAAC,EACD;QACIA,KAAK,EAAE,aAAa;QACpBY,QAAQ,EAAE,CACN;UACIZ,KAAK,EAAE,eAAe;UACtBY,QAAQ,EAAE,CACN;YACIZ,KAAK,EAAE;UACX,CAAC;QAET,CAAC,EACD;UACIA,KAAK,EAAE,eAAe;UACtBY,QAAQ,EAAE,CACN;YACIZ,KAAK,EAAE;UACX,CAAC;QAET,CAAC;MAET,CAAC,EACD;QACIA,KAAK,EAAE,aAAa;QACpBY,QAAQ,EAAE,CACN;UACIZ,KAAK,EAAE,eAAe;UACtBY,QAAQ,EAAE,CACN;YACIZ,KAAK,EAAE;UACX,CAAC;QAET,CAAC,EACD;UACIA,KAAK,EAAE,eAAe;UACtBY,QAAQ,EAAE,CACN;YACIZ,KAAK,EAAE;UACX,CAAC;QAET,CAAC;MAET,CAAC;IAET;EACJ;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}