{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"width\": \"1000px\",\n    \"height\": \"150px\"\n  },\n  id: \"rate-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["style","id","_createElementBlock","_hoisted_1"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\FATPkanban\\PassRateCommon.vue"],"sourcesContent":["<template>\r\n  <div style=\"width: 1000px; height: 150px\" id=\"rate-chart\"></div>\r\n</template>\r\n\r\n<script>\r\nimport GetOption from \"./Datas/rateCommon\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      option: GetOption(),\r\n      myChart: undefined,\r\n    };\r\n  },\r\n  methods: {\r\n    DataUpdate() {\r\n      this.axios\r\n        .post(\"api/FATPKanban/GetYieldDetail\", {\r\n          PDLINE_ID: \"10002\",\r\n          DB: \"BU20\",\r\n        })\r\n        .then((res) => {\r\n          console.log(res);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    GetSeries(data) {\r\n      const rs = [];\r\n      const grp = [];\r\n      const offset =\r\n        data.length > 0 ? Math.floor(this.myChart.getWidth() / data.length) : 1;\r\n      for (let id = 0; id < data.length; id++) {\r\n        const el = data[id];\r\n        grp.push({\r\n          type: \"text\",\r\n          style: {\r\n            text: el.PROCESS_NAME,\r\n            x: id == 0 ? id * offset + 50 : id * offset + 40,\r\n            y: 260,\r\n            fill: \"#fff\",\r\n            font: \"20px verdana\",\r\n          },\r\n        });\r\n\r\n        datas.push({\r\n          value: el.PERCENT,\r\n          name: \"Final Rate\",\r\n          title: {\r\n            show: false,\r\n            offsetCenter: [\"0%\", \"-3%\"],\r\n          },\r\n          detail: {\r\n            valueAnimation: true,\r\n            offsetCenter: [\"0%\", \"-15%\"],\r\n          },\r\n        });\r\n\r\n        const datas = [\r\n          {\r\n            value: el.PERCENT,\r\n            name: \"Final Rate\",\r\n            title: {\r\n              show: false,\r\n              offsetCenter: [\"0%\", \"-3%\"],\r\n            },\r\n            detail: {\r\n              valueAnimation: true,\r\n              offsetCenter: [\"0%\", \"-15%\"],\r\n            },\r\n          },\r\n          {\r\n            value: el.FIRST_RATE,\r\n            name: \"First Pass Rate\",\r\n            title: {\r\n              show: false,\r\n              offsetCenter: [\"0%\", \"27%\"],\r\n            },\r\n            detail: {\r\n              valueAnimation: true,\r\n              offsetCenter: [\"0%\", \"20%\"],\r\n            },\r\n          },\r\n        ];\r\n        rs.push({\r\n          type: \"gauge\",\r\n          startAngle: 90,\r\n          endAngle: -270,\r\n          center: [id == 0 ? id * offset + 80 : id * offset + 60, \"50%\"],\r\n          pointer: {\r\n            show: false,\r\n          },\r\n          progress: {\r\n            show: true,\r\n            overlap: false,\r\n            roundCap: false,\r\n            clip: true,\r\n            itemStyle: {\r\n              borderWidth: 1,\r\n              borderColor: \"#464646\",\r\n            },\r\n          },\r\n          color: [\"#04B404\", \"rgb(253, 2, 253)\", \"purple\", \"#cccccc\"],\r\n          axisLine: {\r\n            lineStyle: {\r\n              width: 15,\r\n            },\r\n          },\r\n          splitLine: {\r\n            show: false,\r\n            distance: 0,\r\n            length: 15,\r\n          },\r\n          axisTick: {\r\n            show: false,\r\n          },\r\n          axisLabel: {\r\n            show: false,\r\n            distance: 20,\r\n          },\r\n          radius: \"65%\",\r\n          data: datas,\r\n          title: {\r\n            fontSize: 8,\r\n          },\r\n          detail: {\r\n            width: 10,\r\n            height: 2,\r\n            fontSize: 8,\r\n            color: \"inherit\",\r\n            borderColor: \"inherit\",\r\n            borderRadius: 20,\r\n            borderWidth: 1,\r\n            formatter: \"{value}%\",\r\n          },\r\n        });\r\n      }\r\n      return [rs, grp];\r\n    },\r\n  },\r\n  mounted() {\r\n    this.DataUpdate();\r\n    var dom = document.getElementById(\"rate-chart\");\r\n    this.myChart = this.$Echart.init(dom, null, {\r\n      renderer: \"canvas\",\r\n      useDirtyRect: false,\r\n    });\r\n    if (this.option && typeof this.option === \"object\") {\r\n      this.myChart.setOption(this.option);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", this.myChart.resize);\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n#rate-chart {\r\n  margin: 0;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAoC,EAApC;IAAA;IAAA;EAAA,CAAoC;EAACC,EAAE,EAAC;;;uBAA7CC,mBAAA,CAAgE,OAAhEC,UAAgE"},"metadata":{},"sourceType":"module","externalDependencies":[]}