{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.lstElements, (el, id) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"container\",\n      id: \"myMSG\",\n      ref_for: true,\n      ref: \"divContainer\",\n      key: id\n    });\n  }), 128 /* KEYED_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","$data","lstElements","el","id","class","ref","key"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\QMessage\\MyTextBox.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\" id=\"myMSG\" ref=\"divContainer\" v-for=\"(el,id) in lstElements\" :key=\"id\">\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      lstElements: [{ type: \"text\", value: '', active: false },\r\n      { type: \"img\", value: `${this.axios.defaults.baseURL}Images/noIMG.png`, active: true }],\r\n      ActiveElement: undefined,\r\n    };\r\n  },\r\n  mounted() {\r\n   // document.addEventListener(\"click\", this.ParentClickHandle);\r\n   // document.addEventListener(\"keyup\", this.CheckInput);\r\n  },\r\n  methods: {\r\n    CheckInput(event) {\r\n      if (event.ctrlKey && event.key === \"v\") {\r\n        console.log(\"Đã nhấn Ctrl+V\");\r\n        // Thực hiện xử lý dán tại đây\r\n      } \r\n      // else {\r\n      //   this.ActiveElement.innerText += event.key;\r\n      // }\r\n    },\r\n    AddTextInput() {\r\n      if (this.lstElements.length <= 0) {\r\n        const container = document.getElementById(\"myMSG\");\r\n        const input = document.createElement(\"input\");\r\n        input.type='text'\r\n       // input.classList.add(\"txtInput\");\r\n        container.appendChild(input);\r\n        this.lstElements.push({ type: \"text\", value: input, active: false });\r\n        this.ActiveElement = input;\r\n      }\r\n    },\r\n    ParentClickHandle(event) {\r\n      if (this.$refs.divContainer.contains(event.target)) {\r\n        this.AddTextInput();\r\n      } else {\r\n        this.ActiveElement = undefined;\r\n        console.log(\"chan\");\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.container {\r\n  border: 1px solid #000;\r\n  background-color: #ffffff;\r\n  text-align: left;\r\n  cursor: text;\r\n  min-height: 30px;\r\n  input[type=\"text\"] {\r\n   // border: none;\r\n    width: 30px;\r\n    display: inline-flex;\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n}\r\n.txtInput {\r\n  width: 100%;\r\n}\r\n</style>"],"mappings":";;2BACEA,mBAAA,CAEMC,SAAA,QAAAC,WAAA,CAFiEC,KAAA,CAAAC,WAAW,GAArBC,EAAE,EAACC,EAAE;yBAAlEN,mBAAA,CAEM;MAFDO,KAAK,EAAC,WAAW;MAACD,EAAE,EAAC,OAAO;;MAACE,GAAG,EAAC,cAAc;MAAiCC,GAAG,EAAEH"},"metadata":{},"sourceType":"module","externalDependencies":[]}