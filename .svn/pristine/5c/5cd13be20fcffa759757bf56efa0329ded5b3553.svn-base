{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, resolveDirective as _resolveDirective, createBlock as _createBlock, withDirectives as _withDirectives } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_q_item_section = _resolveComponent(\"q-item-section\");\n  const _component_q_item = _resolveComponent(\"q-item\");\n  const _component_q_list = _resolveComponent(\"q-list\");\n  const _directive_ripple = _resolveDirective(\"ripple\");\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.FriendList, (emp, idx) => {\n    return _openBlock(), _createBlock(_component_q_list, {\n      key: idx\n    }, {\n      default: _withCtx(() => [_withDirectives((_openBlock(), _createBlock(_component_q_item, {\n        clickable: \"\"\n      }, {\n        default: _withCtx(() => [_createCommentVNode(\" <q-item-section avatar>\\r\\n          <q-avatar>\\r\\n            <img src=\\\"#\\\" alt=\\\"\\\" />\\r\\n          </q-avatar>\\r\\n        </q-item-section> \"), _createVNode(_component_q_item_section, null, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(emp.EMP_NAME), 1 /* TEXT */)]),\n\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */)]),\n\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */)), [[_directive_ripple]])]),\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","$setup","FriendList","emp","idx","_createBlock","_component_q_list","key","_component_q_item","clickable","_createCommentVNode","_createVNode","_component_q_item_section","EMP_NAME"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\QMessage\\FriendList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <q-list v-for=\"(emp, idx) in FriendList\" :key=\"idx\">\r\n      <q-item clickable v-ripple>\r\n        <!-- <q-item-section avatar>\r\n          <q-avatar>\r\n            <img src=\"#\" alt=\"\" />\r\n          </q-avatar>\r\n        </q-item-section> -->\r\n        <q-item-section>\r\n          {{ emp.EMP_NAME }}\r\n        </q-item-section>\r\n      </q-item>\r\n    </q-list>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { inject, onMounted, ref } from \"vue\";\r\nexport default {\r\n  setup() {\r\n    onMounted(() => {\r\n      GetAllFriends();\r\n    });\r\n    let FriendList = ref(null);\r\n    const axios = inject(\"axios\");\r\n    const message = inject(\"message\");\r\n    function GetAllFriends() {\r\n      axios\r\n        .get(`api/chatapp/EmpSearch?emp=all&avatar=True`)\r\n        .then((res) => {\r\n          FriendList = res.data;\r\n          console.log(FriendList);\r\n        })\r\n        .catch((err) => {\r\n          message({\r\n            type: \"error\",\r\n            message: err.response.data,\r\n          });\r\n        });\r\n    }\r\n    return { FriendList };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>"],"mappings":";;;;;;uBACEA,mBAAA,CAaM,e,kBAZJA,mBAAA,CAWSC,SAAA,QAAAC,WAAA,CAXoBC,MAAA,CAAAC,UAAU,GAAvBC,GAAG,EAAEC,GAAG;yBAAxBC,YAAA,CAWSC,iBAAA;MAXiCC,GAAG,EAAEH;IAAG;wBAChD,MASS,C,+BATTC,YAAA,CASSG,iBAAA;QATDC,SAAS,EAAT;MAAS;0BACf,MAIqB,CAJrBC,mBAAA,qJAIqB,EACrBC,YAAA,CAEiBC,yBAAA;4BADf,MAAkB,C,kCAAfT,GAAG,CAACU,QAAQ,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}