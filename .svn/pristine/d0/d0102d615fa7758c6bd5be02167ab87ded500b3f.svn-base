{"ast":null,"code":"import { inject, onMounted, ref } from \"vue\";\nexport default {\n  setup() {\n    onMounted(() => {\n      LoadDefaultImage();\n      GetAllFriends();\n    });\n    const FriendList = ref(null);\n    const axios = inject(\"axios\");\n    const message = inject(\"$message\");\n    function GetAllFriends() {\n      axios.get(`api/chatapp/EmpSearch?emp=all&avatar=True`).then(res => {\n        FriendList.value = res.data;\n        TempList.value = res.data;\n        console.log(TempList.value.filter(it => it.EMP_NAME == \"NinhLe\"));\n      }).catch(err => {\n        message({\n          type: \"error\",\n          message: err\n        });\n      });\n    }\n    const NoAvatar = ref(null);\n    async function LoadDefaultImage() {\n      try {\n        const response = await axios.get(\"Images/noImg.png\", {\n          responseType: \"blob\"\n        });\n        const reader = new FileReader();\n        reader.readAsDataURL(response.data);\n        reader.onloadend = () => {\n          NoAvatar.value = reader.result;\n        };\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    const TempList = ref(null);\n    function EMP_filter(filter) {\n      TempList.value = FriendList.value.filter(item => item.EMP_NAME.includes(filter));\n      console.log(TempList);\n    }\n    const sort = ref(null);\n    const Sorts = [{\n      label: \"A-Z\",\n      value: \"a2z\"\n    }, {\n      label: \"Z-A\",\n      value: \"z2a\"\n    }];\n    const SearchOptions = [{\n      label: \"A-Z\",\n      value: \"a2z\"\n    }, {\n      label: \"Z-A\",\n      value: \"z2a\"\n    }];\n    return {\n      FriendList,\n      GetAllFriends,\n      EMP_filter,\n      TempList,\n      NoAvatar,\n      Sorts,\n      sort,\n      SearchOptions\n    };\n  }\n};","map":{"version":3,"names":["inject","onMounted","ref","setup","LoadDefaultImage","GetAllFriends","FriendList","axios","message","get","then","res","value","data","TempList","console","log","filter","it","EMP_NAME","catch","err","type","NoAvatar","response","responseType","reader","FileReader","readAsDataURL","onloadend","result","error","EMP_filter","item","includes","sort","Sorts","label","SearchOptions"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\QMessage\\FriendList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <q-input color=\"teal\" dense outlined rounded v-model=\"text\" label=\"Search\" style=\"width: 20%;\">\r\n      <template v-slot:prepend>\r\n        <q-icon name=\"search\" />\r\n      </template>\r\n    </q-input>\r\n    <q-select\r\n      filled\r\n      dense\r\n      v-model=\"sort\"\r\n      :options=\"Sorts\"\r\n      label=\"Sort by\"\r\n      color=\"teal\"\r\n      options-selected-class=\"text-deep-orange\"\r\n      style=\"width: 18%;\"\r\n    >\r\n    <template v-slot:prepend>\r\n          <q-icon name=\"sort\" />\r\n        </template>\r\n    </q-select>\r\n  </div>\r\n  <div>\r\n    <q-list v-for=\"(emp, idx) in TempList\" :key=\"idx\">\r\n      <q-item clickable v-ripple>\r\n        <q-item-section avatar>\r\n          <q-checkbox v-model=\"color\" val=\"orange\" color=\"orange\" />\r\n        </q-item-section>\r\n        <q-item-section avatar>\r\n          <q-avatar>\r\n            <img\r\n              :src=\"\r\n                emp.AVATAR ? `data:image/png;base64,${emp.AVATAR}` : NoAvatar\r\n              \"\r\n              alt=\"\"\r\n            />\r\n          </q-avatar>\r\n        </q-item-section>\r\n        <q-item-section>\r\n          {{ emp.EMP_NAME }}\r\n        </q-item-section>\r\n      </q-item>\r\n    </q-list>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { inject, onMounted, ref } from \"vue\";\r\nexport default {\r\n  setup() {\r\n    onMounted(() => {\r\n      LoadDefaultImage();\r\n      GetAllFriends();\r\n    });\r\n    const FriendList = ref(null);\r\n    const axios = inject(\"axios\");\r\n    const message = inject(\"$message\");\r\n    function GetAllFriends() {\r\n      axios\r\n        .get(`api/chatapp/EmpSearch?emp=all&avatar=True`)\r\n        .then((res) => {\r\n          FriendList.value = res.data;\r\n          TempList.value = res.data;\r\n          console.log(TempList.value.filter((it) => it.EMP_NAME == \"NinhLe\"));\r\n        })\r\n        .catch((err) => {\r\n          message({\r\n            type: \"error\",\r\n            message: err,\r\n          });\r\n        });\r\n    }\r\n\r\n    const NoAvatar = ref(null);\r\n\r\n    async function LoadDefaultImage() {\r\n      try {\r\n        const response = await axios.get(\"Images/noImg.png\", {\r\n          responseType: \"blob\",\r\n        });\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(response.data);\r\n\r\n        reader.onloadend = () => {\r\n          NoAvatar.value = reader.result;\r\n        };\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    const TempList = ref(null);\r\n    function EMP_filter(filter) {\r\n      TempList.value = FriendList.value.filter((item) =>\r\n        item.EMP_NAME.includes(filter)\r\n      );\r\n      console.log(TempList);\r\n    }\r\n    const sort = ref(null);\r\n    const Sorts = [\r\n      {\r\n        label: \"A-Z\",\r\n        value: \"a2z\",\r\n      },\r\n      {\r\n        label: \"Z-A\",\r\n        value: \"z2a\",\r\n      },\r\n    ];\r\n    const SearchOptions = [{\r\n        label: \"A-Z\",\r\n        value: \"a2z\",\r\n      },\r\n      {\r\n        label: \"Z-A\",\r\n        value: \"z2a\",\r\n      },]\r\n    return {\r\n      FriendList,\r\n      GetAllFriends,\r\n      EMP_filter,\r\n      TempList,\r\n      NoAvatar,\r\n      Sorts,\r\n      sort,\r\n      SearchOptions\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>"],"mappings":"AA+CA,SAASA,MAAM,EAAEC,SAAS,EAAEC,GAAE,QAAS,KAAK;AAC5C,eAAe;EACbC,KAAKA,CAAA,EAAG;IACNF,SAAS,CAAC,MAAM;MACdG,gBAAgB,EAAE;MAClBC,aAAa,EAAE;IACjB,CAAC,CAAC;IACF,MAAMC,UAAS,GAAIJ,GAAG,CAAC,IAAI,CAAC;IAC5B,MAAMK,KAAI,GAAIP,MAAM,CAAC,OAAO,CAAC;IAC7B,MAAMQ,OAAM,GAAIR,MAAM,CAAC,UAAU,CAAC;IAClC,SAASK,aAAaA,CAAA,EAAG;MACvBE,KAAI,CACDE,GAAG,CAAE,2CAA0C,EAC/CC,IAAI,CAAEC,GAAG,IAAK;QACbL,UAAU,CAACM,KAAI,GAAID,GAAG,CAACE,IAAI;QAC3BC,QAAQ,CAACF,KAAI,GAAID,GAAG,CAACE,IAAI;QACzBE,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACF,KAAK,CAACK,MAAM,CAAEC,EAAE,IAAKA,EAAE,CAACC,QAAO,IAAK,QAAQ,CAAC,CAAC;MACrE,CAAC,EACAC,KAAK,CAAEC,GAAG,IAAK;QACdb,OAAO,CAAC;UACNc,IAAI,EAAE,OAAO;UACbd,OAAO,EAAEa;QACX,CAAC,CAAC;MACJ,CAAC,CAAC;IACN;IAEA,MAAME,QAAO,GAAIrB,GAAG,CAAC,IAAI,CAAC;IAE1B,eAAeE,gBAAgBA,CAAA,EAAG;MAChC,IAAI;QACF,MAAMoB,QAAO,GAAI,MAAMjB,KAAK,CAACE,GAAG,CAAC,kBAAkB,EAAE;UACnDgB,YAAY,EAAE;QAChB,CAAC,CAAC;QACF,MAAMC,MAAK,GAAI,IAAIC,UAAU,EAAE;QAC/BD,MAAM,CAACE,aAAa,CAACJ,QAAQ,CAACX,IAAI,CAAC;QAEnCa,MAAM,CAACG,SAAQ,GAAI,MAAM;UACvBN,QAAQ,CAACX,KAAI,GAAIc,MAAM,CAACI,MAAM;QAChC,CAAC;MACH,EAAE,OAAOC,KAAK,EAAE;QACdhB,OAAO,CAACgB,KAAK,CAACA,KAAK,CAAC;MACtB;IACF;IAEA,MAAMjB,QAAO,GAAIZ,GAAG,CAAC,IAAI,CAAC;IAC1B,SAAS8B,UAAUA,CAACf,MAAM,EAAE;MAC1BH,QAAQ,CAACF,KAAI,GAAIN,UAAU,CAACM,KAAK,CAACK,MAAM,CAAEgB,IAAI,IAC5CA,IAAI,CAACd,QAAQ,CAACe,QAAQ,CAACjB,MAAM,EAC9B;MACDF,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACvB;IACA,MAAMqB,IAAG,GAAIjC,GAAG,CAAC,IAAI,CAAC;IACtB,MAAMkC,KAAI,GAAI,CACZ;MACEC,KAAK,EAAE,KAAK;MACZzB,KAAK,EAAE;IACT,CAAC,EACD;MACEyB,KAAK,EAAE,KAAK;MACZzB,KAAK,EAAE;IACT,CAAC,CACF;IACD,MAAM0B,aAAY,GAAI,CAAC;MACnBD,KAAK,EAAE,KAAK;MACZzB,KAAK,EAAE;IACT,CAAC,EACD;MACEyB,KAAK,EAAE,KAAK;MACZzB,KAAK,EAAE;IACT,CAAC,CAAC;IACJ,OAAO;MACLN,UAAU;MACVD,aAAa;MACb2B,UAAU;MACVlB,QAAQ;MACRS,QAAQ;MACRa,KAAK;MACLD,IAAI;MACJG;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}