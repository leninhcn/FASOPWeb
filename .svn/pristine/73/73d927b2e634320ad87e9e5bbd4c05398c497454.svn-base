{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5af81a4a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"gause-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\FATPkanban\\WoTarget.vue"],"sourcesContent":["<template>\r\n  <div id=\"gause-chart\"></div>\r\n</template>\r\n\r\n<script>\r\nimport GetOption from \"./Datas/gauge\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      option: GetOption(),\r\n      myChart: undefined,\r\n      colors : [ '#1478eb', 'green', 'orange', 'yellow', 'red', 'indigo', 'purple','#cccccc' ]\r\n    };\r\n  },\r\n  methods: {\r\n    DataUpdate() {\r\n      this.axios\r\n        .post(\"api/FATPKanban/GetWoTarget\", { PDLINE_ID: \"10002\", DB: \"BU20\" })\r\n        .then((res) => {\r\n          var gaugeDT = [];\r\n          var grp = [];\r\n          var lc = 0;\r\n          for (let id = 0; id < res.data.data.length; id++) {\r\n            const el = res.data.data[id];\r\n            switch (id) {\r\n              case 0:\r\n                lc = 0;\r\n                break;\r\n              case 1:\r\n                lc = 35;\r\n                break;\r\n              case 2:\r\n                lc = -35;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n\r\n            grp.push({\r\n              type: \"group\",\r\n              left: \"left\",\r\n              top: id*20+5,\r\n              children: [\r\n                {\r\n                  type: \"text\",\r\n                  z: 100,\r\n                  left: \"center\",\r\n                  top: \"middle\",\r\n                  style: {\r\n                    fill: this.colors[id],\r\n                    text: `${el.WORK_ORDER} [${el.OUTPUT_QTY} / ${el.TARGET_QTY}]`,\r\n                    font: \"bold 12px verdana\",\r\n                  },\r\n                },\r\n              ],\r\n            });\r\n\r\n            gaugeDT.push({\r\n              value: el.PERCENT,\r\n              name: el.WORK_ORDER,\r\n              title: {\r\n                offsetCenter: [\"0%\", `${lc - 15}%`],\r\n                color: \"#fff\",\r\n              },\r\n              detail: {\r\n                valueAnimation: true,\r\n                offsetCenter: [\"0%\", `${lc}%`],\r\n              },\r\n            });\r\n          }\r\n\r\n          this.option.series[0].data = gaugeDT;\r\n          this.option.graphic = grp;\r\n          console.log(this.option.graphic);\r\n          this.myChart.setOption(this.option);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n  },\r\n  mounted() {\r\n    var dom = document.getElementById(\"gause-chart\");\r\n    this.myChart = this.$Echart.init(dom, null, {\r\n      renderer: \"canvas\",\r\n      useDirtyRect: false,\r\n    });\r\n\r\n    if (this.option && typeof this.option === \"object\") {\r\n      this.myChart.setOption(this.option);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", this.myChart.resize);\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#gause-chart {\r\n  height: 50vh;\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n</style>"],"mappings":";;;EACOA,EAAE,EAAC;AAAa;;uBAArBC,mBAAA,CAA4B,OAA5BC,UAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}