{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createDirective } from '../utils/private/create.js';\nimport morph from '../utils/morph.js';\nconst morphGroups = {};\nconst props = ['duration', 'delay', 'easing', 'fill', 'classes', 'style', 'duration', 'resize', 'useCSS', 'hideFromClone', 'keepToClone', 'tween', 'tweenFromOpacity', 'tweenToOpacity', 'waitFor', 'onEnd'];\nconst mods = ['resize', 'useCSS', 'hideFromClone', 'keepToClone', 'tween'];\nfunction changeClass(ctx, action) {\n  if (ctx.clsAction !== action) {\n    ctx.clsAction = action;\n    ctx.el.classList[action]('q-morph--invisible');\n  }\n}\nfunction trigger(group) {\n  if (group.animating === true || group.queue.length < 2) {\n    return;\n  }\n  const [from, to] = group.queue;\n  group.animating = true;\n  from.animating = true;\n  to.animating = true;\n  changeClass(from, 'remove');\n  changeClass(to, 'remove');\n  const cancelFn = morph({\n    from: from.el,\n    to: to.el,\n    onToggle() {\n      changeClass(from, 'add');\n      changeClass(to, 'remove');\n    },\n    ...to.opts,\n    onEnd(dir, aborted) {\n      to.opts.onEnd !== void 0 && to.opts.onEnd(dir, aborted);\n      if (aborted === true) {\n        return;\n      }\n      from.animating = false;\n      to.animating = false;\n      group.animating = false;\n      group.cancel = void 0;\n      group.queue.shift();\n      trigger(group);\n    }\n  });\n  group.cancel = () => {\n    cancelFn(true); // abort\n    group.cancel = void 0;\n  };\n}\nfunction updateModifiers(mod, ctx) {\n  const opts = ctx.opts;\n  mods.forEach(name => {\n    opts[name] = mod[name] === true;\n  });\n}\nfunction insertArgs(arg, ctx) {\n  const opts = typeof arg === 'string' && arg.length !== 0 ? arg.split(':') : [];\n  ctx.name = opts[0];\n  ctx.group = opts[1];\n  Object.assign(ctx.opts, {\n    duration: isNaN(opts[2]) === true ? 300 : parseFloat(opts[2]),\n    waitFor: opts[3]\n  });\n}\nfunction updateArgs(arg, ctx) {\n  if (arg.group !== void 0) {\n    ctx.group = arg.group;\n  }\n  if (arg.name !== void 0) {\n    ctx.name = arg.name;\n  }\n  const opts = ctx.opts;\n  props.forEach(name => {\n    if (arg[name] !== void 0) {\n      opts[name] = arg[name];\n    }\n  });\n}\nfunction updateModel(name, ctx) {\n  if (ctx.name === name) {\n    const group = morphGroups[ctx.group];\n\n    // if group is not registered\n    if (group === void 0) {\n      morphGroups[ctx.group] = {\n        name: ctx.group,\n        model: name,\n        queue: [ctx],\n        animating: false\n      };\n      changeClass(ctx, 'remove');\n    }\n    // if model changed\n    else if (group.model !== name) {\n      group.model = name;\n      group.queue.push(ctx);\n      if (group.animating === false && group.queue.length === 2) {\n        trigger(group);\n      }\n    }\n    return;\n  }\n  if (ctx.animating === false) {\n    changeClass(ctx, 'add');\n  }\n}\nfunction updateValue(ctx, value) {\n  let model;\n  if (Object(value) === value) {\n    model = '' + value.model;\n    updateArgs(value, ctx);\n    updateModifiers(value, ctx);\n  } else {\n    model = '' + value;\n  }\n  if (model !== ctx.model) {\n    ctx.model = model;\n    updateModel(model, ctx);\n  } else if (ctx.animating === false && ctx.clsAction !== void 0) {\n    // ensure HMR\n    ctx.el.classList[ctx.clsAction]('q-morph--invisible');\n  }\n}\nexport default createDirective(__QUASAR_SSR_SERVER__ ? {\n  name: 'morph',\n  getSSRProps: binding => {\n    const name = binding.arg ? binding.arg.split(':')[0] : false;\n    return {\n      class: name === binding.value ? '' : 'q-morph--invisible'\n    };\n  }\n} : {\n  name: 'morph',\n  mounted(el, binding) {\n    const ctx = {\n      el,\n      animating: false,\n      opts: {}\n    };\n    updateModifiers(binding.modifiers, ctx);\n    insertArgs(binding.arg, ctx);\n    updateValue(ctx, binding.value);\n    el.__qmorph = ctx;\n  },\n  updated(el, binding) {\n    updateValue(el.__qmorph, binding.value);\n  },\n  beforeUnmount(el) {\n    const ctx = el.__qmorph;\n    const group = morphGroups[ctx.group];\n    if (group !== void 0) {\n      const index = group.queue.indexOf(ctx);\n      if (index !== -1) {\n        group.queue = group.queue.filter(item => item !== ctx);\n        if (group.queue.length === 0) {\n          group.cancel !== void 0 && group.cancel();\n          delete morphGroups[ctx.group];\n        }\n      }\n    }\n    if (ctx.clsAction === 'add') {\n      el.classList.remove('q-morph--invisible');\n    }\n    delete el.__qmorph;\n  }\n});","map":{"version":3,"names":["createDirective","morph","morphGroups","props","mods","changeClass","ctx","action","clsAction","el","classList","trigger","group","animating","queue","length","from","to","cancelFn","onToggle","opts","onEnd","dir","aborted","cancel","shift","updateModifiers","mod","forEach","name","insertArgs","arg","split","Object","assign","duration","isNaN","parseFloat","waitFor","updateArgs","updateModel","model","push","updateValue","value","__QUASAR_SSR_SERVER__","getSSRProps","binding","class","mounted","modifiers","__qmorph","updated","beforeUnmount","index","indexOf","filter","item","remove"],"sources":["D:/LearnVueJS/Vue3/Projects/fa-sop-online/node_modules/quasar/src/directives/Morph.js"],"sourcesContent":["import { createDirective } from '../utils/private/create.js'\nimport morph from '../utils/morph.js'\n\nconst morphGroups = {}\nconst props = [\n  'duration', 'delay', 'easing', 'fill',\n  'classes', 'style', 'duration', 'resize',\n  'useCSS', 'hideFromClone', 'keepToClone', 'tween',\n  'tweenFromOpacity', 'tweenToOpacity',\n  'waitFor', 'onEnd'\n]\nconst mods = [\n  'resize', 'useCSS', 'hideFromClone', 'keepToClone', 'tween'\n]\n\nfunction changeClass (ctx, action) {\n  if (ctx.clsAction !== action) {\n    ctx.clsAction = action\n    ctx.el.classList[ action ]('q-morph--invisible')\n  }\n}\n\nfunction trigger (group) {\n  if (group.animating === true || group.queue.length < 2) {\n    return\n  }\n\n  const [ from, to ] = group.queue\n\n  group.animating = true\n  from.animating = true\n  to.animating = true\n\n  changeClass(from, 'remove')\n  changeClass(to, 'remove')\n\n  const cancelFn = morph({\n    from: from.el,\n    to: to.el,\n    onToggle () {\n      changeClass(from, 'add')\n      changeClass(to, 'remove')\n    },\n    ...to.opts,\n    onEnd (dir, aborted) {\n      to.opts.onEnd !== void 0 && to.opts.onEnd(dir, aborted)\n\n      if (aborted === true) {\n        return\n      }\n\n      from.animating = false\n      to.animating = false\n\n      group.animating = false\n      group.cancel = void 0\n      group.queue.shift()\n\n      trigger(group)\n    }\n  })\n\n  group.cancel = () => {\n    cancelFn(true) // abort\n    group.cancel = void 0\n  }\n}\n\nfunction updateModifiers (mod, ctx) {\n  const opts = ctx.opts\n\n  mods.forEach(name => {\n    opts[ name ] = mod[ name ] === true\n  })\n}\n\nfunction insertArgs (arg, ctx) {\n  const opts = typeof arg === 'string' && arg.length !== 0\n    ? arg.split(':') : []\n\n  ctx.name = opts[ 0 ]\n  ctx.group = opts[ 1 ]\n\n  Object.assign(ctx.opts, {\n    duration: isNaN(opts[ 2 ]) === true\n      ? 300\n      : parseFloat(opts[ 2 ]),\n    waitFor: opts[ 3 ]\n  })\n}\n\nfunction updateArgs (arg, ctx) {\n  if (arg.group !== void 0) {\n    ctx.group = arg.group\n  }\n  if (arg.name !== void 0) {\n    ctx.name = arg.name\n  }\n\n  const opts = ctx.opts\n\n  props.forEach(name => {\n    if (arg[ name ] !== void 0) {\n      opts[ name ] = arg[ name ]\n    }\n  })\n}\n\nfunction updateModel (name, ctx) {\n  if (ctx.name === name) {\n    const group = morphGroups[ ctx.group ]\n\n    // if group is not registered\n    if (group === void 0) {\n      morphGroups[ ctx.group ] = {\n        name: ctx.group,\n        model: name,\n        queue: [ ctx ],\n        animating: false\n      }\n\n      changeClass(ctx, 'remove')\n    }\n    // if model changed\n    else if (group.model !== name) {\n      group.model = name\n      group.queue.push(ctx)\n\n      if (group.animating === false && group.queue.length === 2) {\n        trigger(group)\n      }\n    }\n\n    return\n  }\n\n  if (ctx.animating === false) {\n    changeClass(ctx, 'add')\n  }\n}\n\nfunction updateValue (ctx, value) {\n  let model\n\n  if (Object(value) === value) {\n    model = '' + value.model\n    updateArgs(value, ctx)\n    updateModifiers(value, ctx)\n  }\n  else {\n    model = '' + value\n  }\n\n  if (model !== ctx.model) {\n    ctx.model = model\n    updateModel(model, ctx)\n  }\n  else if (ctx.animating === false && ctx.clsAction !== void 0) {\n    // ensure HMR\n    ctx.el.classList[ ctx.clsAction ]('q-morph--invisible')\n  }\n}\n\nexport default createDirective(__QUASAR_SSR_SERVER__\n  ? {\n      name: 'morph',\n      getSSRProps: binding => {\n        const name = binding.arg\n          ? binding.arg.split(':')[ 0 ]\n          : false\n\n        return {\n          class: name === binding.value ? '' : 'q-morph--invisible'\n        }\n      }\n    }\n  : {\n      name: 'morph',\n\n      mounted (el, binding) {\n        const ctx = {\n          el,\n          animating: false,\n          opts: {}\n        }\n\n        updateModifiers(binding.modifiers, ctx)\n        insertArgs(binding.arg, ctx)\n        updateValue(ctx, binding.value)\n\n        el.__qmorph = ctx\n      },\n\n      updated (el, binding) {\n        updateValue(el.__qmorph, binding.value)\n      },\n\n      beforeUnmount (el) {\n        const ctx = el.__qmorph\n\n        const group = morphGroups[ ctx.group ]\n\n        if (group !== void 0) {\n          const index = group.queue.indexOf(ctx)\n\n          if (index !== -1) {\n            group.queue = group.queue.filter(item => item !== ctx)\n\n            if (group.queue.length === 0) {\n              group.cancel !== void 0 && group.cancel()\n              delete morphGroups[ ctx.group ]\n            }\n          }\n        }\n\n        if (ctx.clsAction === 'add') {\n          el.classList.remove('q-morph--invisible')\n        }\n\n        delete el.__qmorph\n      }\n    }\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}