{"ast":null,"code":"const modifiersAll = {\n  left: true,\n  right: true,\n  up: true,\n  down: true,\n  horizontal: true,\n  vertical: true\n};\nconst directionList = Object.keys(modifiersAll);\nmodifiersAll.all = true;\nexport function getModifierDirections(mod) {\n  const dir = {};\n  for (const direction of directionList) {\n    if (mod[direction] === true) {\n      dir[direction] = true;\n    }\n  }\n  if (Object.keys(dir).length === 0) {\n    return modifiersAll;\n  }\n  if (dir.horizontal === true) {\n    dir.left = dir.right = true;\n  } else if (dir.left === true && dir.right === true) {\n    dir.horizontal = true;\n  }\n  if (dir.vertical === true) {\n    dir.up = dir.down = true;\n  } else if (dir.up === true && dir.down === true) {\n    dir.vertical = true;\n  }\n  if (dir.horizontal === true && dir.vertical === true) {\n    dir.all = true;\n  }\n  return dir;\n}\n\n// This is especially important (not the main reason, but important)\n// for TouchSwipe directive running on Firefox\n// because text selection on such elements cannot be determined\n// without additional work (on top of getSelection() API)\n// https://bugzilla.mozilla.org/show_bug.cgi?id=85686\nconst avoidNodeNamesList = ['INPUT', 'TEXTAREA'];\nexport function shouldStart(evt, ctx) {\n  return ctx.event === void 0 && evt.target !== void 0 && evt.target.draggable !== true && typeof ctx.handler === 'function' && avoidNodeNamesList.includes(evt.target.nodeName.toUpperCase()) === false && (evt.qClonedBy === void 0 || evt.qClonedBy.indexOf(ctx.uid) === -1);\n}","map":{"version":3,"names":["modifiersAll","left","right","up","down","horizontal","vertical","directionList","Object","keys","all","getModifierDirections","mod","dir","direction","length","avoidNodeNamesList","shouldStart","evt","ctx","event","target","draggable","handler","includes","nodeName","toUpperCase","qClonedBy","indexOf","uid"],"sources":["D:/LearnVueJS/Vue3/Projects/fa-sop-online/node_modules/quasar/src/utils/private/touch.js"],"sourcesContent":["\nconst modifiersAll = {\n  left: true,\n  right: true,\n  up: true,\n  down: true,\n  horizontal: true,\n  vertical: true\n}\n\nconst directionList = Object.keys(modifiersAll)\n\nmodifiersAll.all = true\n\nexport function getModifierDirections (mod) {\n  const dir = {}\n\n  for (const direction of directionList) {\n    if (mod[ direction ] === true) {\n      dir[ direction ] = true\n    }\n  }\n\n  if (Object.keys(dir).length === 0) {\n    return modifiersAll\n  }\n\n  if (dir.horizontal === true) {\n    dir.left = dir.right = true\n  }\n  else if (dir.left === true && dir.right === true) {\n    dir.horizontal = true\n  }\n\n  if (dir.vertical === true) {\n    dir.up = dir.down = true\n  }\n  else if (dir.up === true && dir.down === true) {\n    dir.vertical = true\n  }\n\n  if (dir.horizontal === true && dir.vertical === true) {\n    dir.all = true\n  }\n\n  return dir\n}\n\n// This is especially important (not the main reason, but important)\n// for TouchSwipe directive running on Firefox\n// because text selection on such elements cannot be determined\n// without additional work (on top of getSelection() API)\n// https://bugzilla.mozilla.org/show_bug.cgi?id=85686\nconst avoidNodeNamesList = [ 'INPUT', 'TEXTAREA' ]\n\nexport function shouldStart (evt, ctx) {\n  return ctx.event === void 0\n    && evt.target !== void 0\n    && evt.target.draggable !== true\n    && typeof ctx.handler === 'function'\n    && avoidNodeNamesList.includes(evt.target.nodeName.toUpperCase()) === false\n    && (evt.qClonedBy === void 0 || evt.qClonedBy.indexOf(ctx.uid) === -1)\n}\n"],"mappings":"AACA,MAAMA,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,EAAE,EAAE,IAAI;EACRC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,IAAI;EAChBC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACT,YAAY,CAAC;AAE/CA,YAAY,CAACU,GAAG,GAAG,IAAI;AAEvB,OAAO,SAASC,qBAAqBA,CAAEC,GAAG,EAAE;EAC1C,MAAMC,GAAG,GAAG,CAAC,CAAC;EAEd,KAAK,MAAMC,SAAS,IAAIP,aAAa,EAAE;IACrC,IAAIK,GAAG,CAAEE,SAAS,CAAE,KAAK,IAAI,EAAE;MAC7BD,GAAG,CAAEC,SAAS,CAAE,GAAG,IAAI;IACzB;EACF;EAEA,IAAIN,MAAM,CAACC,IAAI,CAACI,GAAG,CAAC,CAACE,MAAM,KAAK,CAAC,EAAE;IACjC,OAAOf,YAAY;EACrB;EAEA,IAAIa,GAAG,CAACR,UAAU,KAAK,IAAI,EAAE;IAC3BQ,GAAG,CAACZ,IAAI,GAAGY,GAAG,CAACX,KAAK,GAAG,IAAI;EAC7B,CAAC,MACI,IAAIW,GAAG,CAACZ,IAAI,KAAK,IAAI,IAAIY,GAAG,CAACX,KAAK,KAAK,IAAI,EAAE;IAChDW,GAAG,CAACR,UAAU,GAAG,IAAI;EACvB;EAEA,IAAIQ,GAAG,CAACP,QAAQ,KAAK,IAAI,EAAE;IACzBO,GAAG,CAACV,EAAE,GAAGU,GAAG,CAACT,IAAI,GAAG,IAAI;EAC1B,CAAC,MACI,IAAIS,GAAG,CAACV,EAAE,KAAK,IAAI,IAAIU,GAAG,CAACT,IAAI,KAAK,IAAI,EAAE;IAC7CS,GAAG,CAACP,QAAQ,GAAG,IAAI;EACrB;EAEA,IAAIO,GAAG,CAACR,UAAU,KAAK,IAAI,IAAIQ,GAAG,CAACP,QAAQ,KAAK,IAAI,EAAE;IACpDO,GAAG,CAACH,GAAG,GAAG,IAAI;EAChB;EAEA,OAAOG,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMG,kBAAkB,GAAG,CAAE,OAAO,EAAE,UAAU,CAAE;AAElD,OAAO,SAASC,WAAWA,CAAEC,GAAG,EAAEC,GAAG,EAAE;EACrC,OAAOA,GAAG,CAACC,KAAK,KAAK,KAAK,CAAC,IACtBF,GAAG,CAACG,MAAM,KAAK,KAAK,CAAC,IACrBH,GAAG,CAACG,MAAM,CAACC,SAAS,KAAK,IAAI,IAC7B,OAAOH,GAAG,CAACI,OAAO,KAAK,UAAU,IACjCP,kBAAkB,CAACQ,QAAQ,CAACN,GAAG,CAACG,MAAM,CAACI,QAAQ,CAACC,WAAW,EAAE,CAAC,KAAK,KAAK,KACvER,GAAG,CAACS,SAAS,KAAK,KAAK,CAAC,IAAIT,GAAG,CAACS,SAAS,CAACC,OAAO,CAACT,GAAG,CAACU,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AAC1E"},"metadata":{},"sourceType":"module","externalDependencies":[]}