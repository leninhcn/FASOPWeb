{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, withCtx as _withCtx, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '../../assets/audio/message_tone.mp3';\nconst _withScopeId = n => (_pushScopeId(\"data-v-656467e0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"source\", {\n  src: _imports_0,\n  type: \"audio/mpeg\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_3 = [_hoisted_2];\nconst _hoisted_4 = {\n  class: \"q-pa-md row justify-center\"\n};\nconst _hoisted_5 = {\n  style: {\n    \"width\": \"100%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Qmsg = _resolveComponent(\"Qmsg\");\n  const _component_q_scroll_area = _resolveComponent(\"q-scroll-area\");\n  const _component_ctlBar = _resolveComponent(\"ctlBar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"audio\", {\n    ref: \"player\",\n    onTimeupdate: _cache[0] || (_cache[0] = (...args) => _ctx.ShowCurrentTime && _ctx.ShowCurrentTime(...args)),\n    preload: \"auto\"\n  }, _hoisted_3, 544 /* HYDRATE_EVENTS, NEED_PATCH */), _createVNode(_component_q_scroll_area, {\n    dark: \"\",\n    class: \"text-white rounded-borders\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"370px\"\n    },\n    ref: \"hisScroll\",\n    onScroll: _ctx.onHisScroll\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ChatHis, (msg, id) => {\n      return _openBlock(), _createBlock(_component_Qmsg, {\n        key: id,\n        Name: msg.Sender,\n        MemberID: msg.ID,\n        BGColor: msg.ID == _ctx.GetUser.EMP_ID ? $data.MSGTextColor.Sender : $data.MSGTextColor.Receiver,\n        Message: msg.message,\n        Sent: msg.ID == _ctx.GetUser.EMP_ID,\n        Stamp: \"7 minutes ago\",\n        TextColor: \"white\"\n      }, null, 8 /* PROPS */, [\"Name\", \"MemberID\", \"BGColor\", \"Message\", \"Sent\"]);\n    }), 128 /* KEYED_FRAGMENT */))])])]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onScroll\"]), _createVNode(_component_ctlBar, {\n    ref: \"msgCtlBar\",\n    onMessageSent: $options.LocalSentMSG\n  }, null, 8 /* PROPS */, [\"onMessageSent\"])]);\n}","map":{"version":3,"names":["_imports_0","class","_createElementVNode","src","type","_hoisted_2","style","_createElementBlock","_hoisted_1","ref","onTimeupdate","_cache","args","_ctx","ShowCurrentTime","preload","_createVNode","_component_q_scroll_area","dark","onScroll","onHisScroll","_hoisted_4","_hoisted_5","_Fragment","_renderList","$data","ChatHis","msg","id","_createBlock","_component_Qmsg","key","Name","Sender","MemberID","ID","BGColor","GetUser","EMP_ID","MSGTextColor","Receiver","Message","message","Sent","Stamp","TextColor","_component_ctlBar","onMessageSent","$options","LocalSentMSG"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\QMessage\\HistoryBox.vue"],"sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n    <audio ref=\"player\" @timeupdate=\"ShowCurrentTime\" preload=\"auto\">\r\n      <source src=\"../../assets/audio/message_tone.mp3\" type=\"audio/mpeg\" />\r\n    </audio>\r\n    <q-scroll-area\r\n      dark\r\n      class=\"text-white rounded-borders\"\r\n      style=\"width: 100%; height: 370px\"\r\n      ref=\"hisScroll\"\r\n      @scroll=\"onHisScroll\"\r\n    >\r\n      <div class=\"q-pa-md row justify-center\">\r\n        <div style=\"width: 100%\">\r\n          <Qmsg\r\n            v-for=\"(msg, id) in ChatHis\"\r\n            :key=\"id\"\r\n            :Name=\"msg.Sender\"\r\n            :MemberID=\"msg.ID\"\r\n            :BGColor=\"\r\n              msg.ID == GetUser.EMP_ID\r\n                ? MSGTextColor.Sender\r\n                : MSGTextColor.Receiver\r\n            \"\r\n            :Message=\"msg.message\"\r\n            :Sent=\"msg.ID == GetUser.EMP_ID\"\r\n            Stamp=\"7 minutes ago\"\r\n            TextColor=\"white\"\r\n          ></Qmsg>\r\n        </div>\r\n      </div>\r\n    </q-scroll-area>\r\n    <ctlBar ref=\"msgCtlBar\" @MessageSent=\"LocalSentMSG\"></ctlBar>\r\n  </div>\r\n</template>\r\n  \r\n  <script>\r\nimport { io } from \"socket.io-client\";\r\nimport { mapGetters } from \"vuex\";\r\nimport Qmsg from \"./Qmsg.vue\";\r\nimport ctlBar from \"./MsgSender.vue\";\r\nexport default {\r\n  name: \"HistoryBox\",\r\n  components: {\r\n    Qmsg,\r\n    ctlBar,\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      GetUser: \"getUser\",\r\n    }),\r\n  },\r\n  props: {},\r\n  beforeUnmount() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n    }\r\n  },\r\n  mounted() {\r\n    this.RefreshData();\r\n    this.InitSocket();\r\n  },\r\n  data() {\r\n    return {\r\n      url: \"http://172.23.20.170:3001\",\r\n      socket: undefined,\r\n      connected: false,\r\n      GroupID: 0,\r\n      testIMG: \"\",\r\n      MSGTextColor: { Sender: \"indigo-14\", Receiver: \"blue-grey-3\" },\r\n      members: undefined,\r\n      ChatHis: [],\r\n      lastMSG: undefined,\r\n    };\r\n  },\r\n  methods: {\r\n    InitSocket() {\r\n      this.socket = io(this.url);\r\n      this.socket.on(\"connect\", () => {\r\n        this.connected = true;\r\n        this.$refs.msgCtlBar.EnableSender(this.connected);\r\n      });\r\n\r\n      this.socket.on(\"disconnect\", () => {\r\n        this.connected = false;\r\n      });\r\n      this.socket.on(\"msgFromServer\", (data) => {\r\n        if (data.msg.group_id == this.GroupID) {\r\n          const localMSG = {\r\n            Sender: this.members.find((it) => it.EMP_ID == data.msg.sender)\r\n              .EMP_NAME,\r\n            ID: data.msg.sender,\r\n            message: [{ text: data.msg.content }],\r\n          };\r\n          this.MessageToUI(localMSG);\r\n        }\r\n        this.$emit(\"UpdateGroupInfo\", {\r\n          GROUP_ID: data.msg.group_id,\r\n          LAST_MSG: data.msg.content,\r\n          UNREAD_NUM: 1,\r\n        });\r\n        this.$refs.player.play();\r\n      });\r\n    },\r\n    sendMessage(msg_sent) {\r\n      this.socket.emit(\"sendMsg\", {\r\n        type: \"ownMsg\",\r\n        msg: {\r\n          content: msg_sent,\r\n          type: \"text\",\r\n          sender: this.GetUser.EMP_ID,\r\n          receiver: 0,\r\n          group_id: this.GroupID,\r\n          media_id: 0,\r\n        },\r\n      });\r\n    },\r\n    sendReadAllMsg(grp_id) {\r\n      this.socket.emit(\"readAllMSG\", {\r\n        type: \"ownMsg\",\r\n        msg: { MES_ID: 0, EMP_ID: this.GetUser.EMP_ID, GROUP_ID: grp_id },\r\n      });\r\n    },\r\n    MessageToUI(localMSG) {\r\n      if (this.lastMSG && this.lastMSG.ID == localMSG.ID) {\r\n        localMSG.message.forEach((el) => {\r\n          this.ChatHis[this.ChatHis.length - 1].message.push(el);\r\n        });\r\n      } else {\r\n        this.ChatHis.push(localMSG);\r\n        this.lastMSG = localMSG;\r\n      }\r\n      this.ScrollHis();\r\n    },\r\n    LocalSentMSG(msg) {\r\n      const localMSG = {\r\n        Sender: this.GetUser.Name,\r\n        ID: this.GetUser.EMP_ID,\r\n        message: [{ text: msg }],\r\n      };\r\n      this.MessageToUI(localMSG);\r\n      this.sendMessage(msg);\r\n      this.$emit(\"UpdateLastMSG\", { msg: msg, group_id: this.GroupID });\r\n    },\r\n    RefreshData(group_id) {\r\n      if (group_id > 0 && group_id != this.GroupID) {\r\n        this.GroupID = group_id;\r\n        this.GetMemberInfor();\r\n        this.GetChatHistory();\r\n        this.sendReadAllMsg(group_id);\r\n      }\r\n    },\r\n    ShowAvatar(member) {\r\n      if (this.members)\r\n        this.members.forEach((item) => {\r\n          if (item.EMP_ID == member) {\r\n            return { img: this.imageFromByte(item.AVATAR) };\r\n          }\r\n        });\r\n    },\r\n    imageFromByte(strBase64) {\r\n      return `data:image/jpeg;base64,${strBase64}`;\r\n    },\r\n    async GetMemberInfor() {\r\n      await this.axios\r\n        .get(`api/chatapp/GetGroupMemberInfo?groupID=${this.GroupID}`)\r\n        .then((res) => {\r\n          this.members = res.data;\r\n          this.testIMG = this.members[0].AVATAR;\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response.data);\r\n        });\r\n    },\r\n    async GetChatHistory() {\r\n      this.ChatHis = [];\r\n      await this.axios\r\n        .get(`api/chatapp/GetHistory?groupID=${this.GroupID}&StartPoint=0`)\r\n        .then((res) => {\r\n          console.log(res.data);\r\n          var sentEMP = res.data[0].SENDER_ID;\r\n          var msg = undefined;\r\n          res.data.forEach((item) => {\r\n            if (!msg) {\r\n              msg = {\r\n                Sender: item.SENDER,\r\n                ID: item.SENDER_ID,\r\n                message: [{ text: item.MES_CONTENT }],\r\n              };\r\n            } else {\r\n              if (sentEMP == item.SENDER_ID) {\r\n                msg.message.push({ text: item.MES_CONTENT });\r\n              } else {\r\n                this.ChatHis.push(msg);\r\n                msg = {\r\n                  Sender: item.SENDER,\r\n                  ID: item.SENDER_ID,\r\n                  message: [{ text: item.MES_CONTENT }],\r\n                };\r\n              }\r\n            }\r\n            sentEMP = item.SENDER_ID;\r\n          });\r\n          this.ChatHis.push(msg);\r\n          this.ScrollHis(1);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    ScrollHis(time2scroll = 300) {\r\n      setTimeout(() => {\r\n        this.$refs.hisScroll.setScrollPercentage(\"vertical\", 1, time2scroll);\r\n      }, 100);\r\n    },\r\n  },\r\n  onHisScroll({ verticalPosition }) {\r\n    console.log(\"aaaaa\");\r\n    console.log(verticalPosition);\r\n  },\r\n};\r\n</script>\r\n  \r\n  <!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n  <style lang=\"scss\" scoped>\r\n.hello {\r\n  margin: {\r\n    left: 5px;\r\n    right: 5px;\r\n  }\r\n}\r\n</style>\r\n  "],"mappings":";OAGcA,UAAyC;;;EAFhDC,KAAK,EAAC;AAAO;gEAEdC,mBAAA,CAAsE;EAA9DC,GAAyC,EAAzCH,UAAyC;EAACI,IAAI,EAAC;;oBAAvDC,UAAsE,C;;EASjEJ,KAAK,EAAC;AAA4B;;EAChCK,KAAmB,EAAnB;IAAA;EAAA;AAAmB;;;;;uBAZ9BC,mBAAA,CAgCM,OAhCNC,UAgCM,GA/BJN,mBAAA,CAEQ;IAFDO,GAAG,EAAC,QAAQ;IAAEC,YAAU,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAC,eAAA,IAAAD,IAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;IAAEG,OAAO,EAAC;wDAG1DC,YAAA,CA0BgBC,wBAAA;IAzBdC,IAAI,EAAJ,EAAI;IACJjB,KAAK,EAAC,4BAA4B;IAClCK,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAAkC;IAClCG,GAAG,EAAC,WAAW;IACdU,QAAM,EAAEN,IAAA,CAAAO;;sBAET,MAkBM,CAlBNlB,mBAAA,CAkBM,OAlBNmB,UAkBM,GAjBJnB,mBAAA,CAgBM,OAhBNoB,UAgBM,I,kBAfJf,mBAAA,CAcQgB,SAAA,QAAAC,WAAA,CAbcC,KAAA,CAAAC,OAAO,GAAnBC,GAAG,EAAEC,EAAE;2BADjBC,YAAA,CAcQC,eAAA;QAZLC,GAAG,EAAEH,EAAE;QACPI,IAAI,EAAEL,GAAG,CAACM,MAAM;QAChBC,QAAQ,EAAEP,GAAG,CAACQ,EAAE;QAChBC,OAAO,EAAkBT,GAAG,CAACQ,EAAE,IAAItB,IAAA,CAAAwB,OAAO,CAACC,MAAM,GAAoBb,KAAA,CAAAc,YAAY,CAACN,MAAM,GAAoBR,KAAA,CAAAc,YAAY,CAACC,QAAQ;QAKjIC,OAAO,EAAEd,GAAG,CAACe,OAAO;QACpBC,IAAI,EAAEhB,GAAG,CAACQ,EAAE,IAAItB,IAAA,CAAAwB,OAAO,CAACC,MAAM;QAC/BM,KAAK,EAAC,eAAe;QACrBC,SAAS,EAAC;;;;;mCAKlB7B,YAAA,CAA6D8B,iBAAA;IAArDrC,GAAG,EAAC,WAAW;IAAEsC,aAAW,EAAEC,QAAA,CAAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}