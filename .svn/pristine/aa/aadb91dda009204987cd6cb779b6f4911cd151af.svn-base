{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createCanvas, loadImage } from \"canvas\";\nimport { mapGetters } from \"vuex\";\nimport His from \"./HistoryBox.vue\";\nimport Group from \"./GroupInfo.vue\";\nexport default {\n  components: {\n    His,\n    Group\n  },\n  computed: {\n    ...mapGetters({\n      GetUser: \"getUser\"\n    })\n  },\n  mounted() {\n    this.Avatar = sessionStorage.getItem(\"Avatar\");\n    this.GetChatGroupList();\n    this.GetAllEMP();\n  },\n  methods: {\n    UpdateGroupFromHis(grp_info) {\n      this.GroupList.forEach((el, idx) => {\n        if (el.GROUP_ID == grp_info.GROUP_ID) {\n          this.GroupList[idx].INFO.LAST_MSG = grp_info.LAST_MSG;\n          if (this.CurrentGroupID != grp_info.GROUP_ID) {\n            this.GroupList[idx].INFO.UNREAD_NUM += grp_info.UNREAD_NUM;\n            this.TotalUnread += grp_info.UNREAD_NUM;\n          }\n        }\n      });\n    },\n    GroupClick(grp_id, grp_name) {\n      this.CurrentGroupID = grp_id;\n      this.$refs.MyHis.RefreshData(grp_id);\n      this.activeID = grp_id;\n      this.GroupName = grp_name;\n      this.addUser = false;\n      this.GroupList.forEach((el, idx) => {\n        if (el.GROUP_ID == grp_id) {\n          this.TotalUnread -= this.GroupList[idx].INFO.UNREAD_NUM;\n          this.GroupList[idx].INFO.UNREAD_NUM = 0;\n        }\n      });\n    },\n    GroupRightClick(grp) {\n      console.log(grp);\n    },\n    GetAllEMP() {\n      this.axios.get(`api/chatapp/EmpSearch?emp=all`).then(res => {\n        res.data.forEach(el => {\n          this.stringOptions.push({\n            label: el.EMP_NAME,\n            value: el.EMP_ID,\n            description: el.EMP_NO,\n            icon: \"contact_mail\"\n          });\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    abortFilterFn() {\n      console.log(\"delayed filter aborted\");\n    },\n    async filterFn(val, update) {\n      update(() => {\n        if (val === \"\") {\n          this.lstMembers = this.stringOptions;\n        } else {\n          const needle = val.toLowerCase();\n          this.lstMembers = this.stringOptions.filter(v => v.label.toLowerCase().indexOf(needle) > -1 || v.description.toLowerCase().indexOf(needle) > -1);\n        }\n      });\n    },\n    async loadImageAsBase64(imagePath) {\n      try {\n        const response = await this.axios.get(imagePath, {\n          responseType: \"blob\"\n        });\n        const file = response.data;\n        // console.log(file);\n        const reader = new FileReader();\n        // let imageData = undefined;\n        // reader.onloadend = () => {\n        //   imageData = reader.result;\n        // };\n        const temp = await reader.readAsBinaryString(file);\n        console.log(temp);\n        return temp;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async GroupAvatar(group, idx) {\n      const lsrImg = [];\n      group.INFO.EMP_AVATAR.forEach(async (el, id) => {\n        if (id <= 3) {\n          if (group.INFO.EMP_AVATAR.length == 2) {\n            if (el.EMP_ID != this.GetUser.EMP_ID) {\n              lsrImg.push(el.AVATAR);\n              return;\n            }\n          } else {\n            if (el.AVATAR) lsrImg.push(el.AVATAR);else {\n              const noimg = await this.loadImageAsBase64(\"Images/noImg.png\");\n              lsrImg.push(noimg);\n            }\n          }\n        } else {\n          return;\n        }\n      });\n      const mergedImageUrl = await this.ImageMerging(lsrImg);\n      if (this.GroupAvatarList[idx]) {\n        this.GroupAvatarList[idx] = mergedImageUrl;\n      } else {\n        this.GroupAvatarList.push(mergedImageUrl);\n      }\n      this.GroupList[idx].INFO.EMP_AVATAR.AVATAR = undefined;\n    },\n    async ImageMerging(imgList) {\n      if (!imgList || imgList.length > 4) {\n        return \"#\";\n      }\n      if (imgList.length <= 2) {\n        return `data:image/png;base64,${imgList[0]}`;\n      }\n      const canvasWidth = 1000;\n      const canvasHeight = 1000;\n      let canvas = createCanvas(500, 500);\n      let ctx = canvas.getContext(\"2d\");\n      var lstSyncIMG = [];\n      return new Promise((resolve, reject) => {\n        const promises = [];\n        imgList.forEach(task => {\n          const promise = new Promise((innerResolve, innerReject) => {\n            try {\n              loadImage(`data:image/png;base64,${task}`).then(res => {\n                ctx.drawImage(res, 0, 0, 500, 500);\n                loadImage(canvas.toDataURL(\"image/png\")).then(img => {\n                  lstSyncIMG.push(img);\n                  innerResolve(img);\n                }).catch(er => innerReject(er));\n              }).catch(err => innerReject(err));\n            } catch (error) {\n              innerReject(error);\n            }\n          });\n          promises.push(promise);\n        });\n        Promise.all(promises).then(() => {\n          canvas = createCanvas(canvasWidth, canvasHeight);\n          ctx = canvas.getContext(\"2d\");\n          lstSyncIMG.forEach((el, idx) => {\n            switch (idx) {\n              case 0:\n                ctx.drawImage(el, 0, 0, 500, 500);\n                break;\n              case 1:\n                ctx.drawImage(el, 500, 0, 500, 500);\n                break;\n              case 2:\n                ctx.drawImage(el, 0, 500, 500, 500);\n                break;\n              case 3:\n                ctx.drawImage(el, 500, 500, 500, 500);\n                break;\n              default:\n                break;\n            }\n          });\n          resolve(canvas.toDataURL(\"image/png\"));\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    GetChatGroupList() {\n      this.axios.get(`api/chatapp/GetEmpAllGroup?emp_id=${this.GetUser.EMP_ID}`).then(res => {\n        this.TotalUnread = 0;\n        this.GroupList = res.data;\n        this.GroupList.forEach((element, idx) => {\n          this.TotalUnread += element.INFO.UNREAD_NUM;\n          this.GroupAvatar(element, idx);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    imageFromByte(strBase64) {\n      return `data:image/jpeg;base64,${strBase64}`;\n    },\n    AddGroupUser() {\n      if (this.CurrentGroupID > 0) {\n        if (this.selectedUser.length > 0) {\n          const grp_users = {\n            REMOVE_EMP: false,\n            GROUP_ID: this.CurrentGroupID,\n            EMP_LIST: []\n          };\n          this.selectedUser.forEach(el => {\n            grp_users.EMP_LIST.push(el.value);\n          });\n          console.log(grp_users);\n          this.axios.post(\"api/chatapp/GroupEmpEdit\", grp_users).then(res => {\n            this.$message({\n              showClose: true,\n              type: \"success\",\n              message: res.data\n            });\n          }).catch(err => {\n            console.log(err);\n          });\n        }\n      }\n    }\n  },\n  data() {\n    return {\n      NoImageData: undefined,\n      CurrentGroupID: 0,\n      addUser: false,\n      selectedUser: undefined,\n      lstMembers: [],\n      stringOptions: [],\n      tab: \"chats\",\n      splitterModel: 20,\n      Avatar: \"\",\n      drawer: false,\n      activeID: 0,\n      GroupName: \"\",\n      GroupList: [{\n        GROUP_ID: 0,\n        GROUP_NAME: \"Default\",\n        INFO: {\n          SENDER_ID: 0,\n          LAST_MSG: \"None\",\n          LAST_TIME: undefined,\n          UNREAD_NUM: 0,\n          EMP_AVATAR: undefined\n        }\n      }],\n      GroupAvatarList: [],\n      TotalUnread: 0\n    };\n  }\n};","map":{"version":3,"names":["createCanvas","loadImage","mapGetters","His","Group","components","computed","GetUser","mounted","Avatar","sessionStorage","getItem","GetChatGroupList","GetAllEMP","methods","UpdateGroupFromHis","grp_info","GroupList","forEach","el","idx","GROUP_ID","INFO","LAST_MSG","CurrentGroupID","UNREAD_NUM","TotalUnread","GroupClick","grp_id","grp_name","$refs","MyHis","RefreshData","activeID","GroupName","addUser","GroupRightClick","grp","console","log","axios","get","then","res","data","stringOptions","push","label","EMP_NAME","value","EMP_ID","description","EMP_NO","icon","catch","err","abortFilterFn","filterFn","val","update","lstMembers","needle","toLowerCase","filter","v","indexOf","loadImageAsBase64","imagePath","response","responseType","file","reader","FileReader","temp","readAsBinaryString","error","GroupAvatar","group","lsrImg","EMP_AVATAR","id","length","AVATAR","noimg","mergedImageUrl","ImageMerging","GroupAvatarList","undefined","imgList","canvasWidth","canvasHeight","canvas","ctx","getContext","lstSyncIMG","Promise","resolve","reject","promises","task","promise","innerResolve","innerReject","drawImage","toDataURL","img","er","all","element","imageFromByte","strBase64","AddGroupUser","selectedUser","grp_users","REMOVE_EMP","EMP_LIST","post","$message","showClose","type","message","NoImageData","tab","splitterModel","drawer","GROUP_NAME","SENDER_ID","LAST_TIME"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\QMessage\\MainAppForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"q-pa-md\">\r\n    <q-layout\r\n      view=\"lHh Lpr lff\"\r\n      container\r\n      style=\"height: 500px\"\r\n      class=\"shadow-2 rounded-borders\"\r\n    >\r\n      <q-header elevated class=\"bg-cyan-8\">\r\n        <q-toolbar>\r\n          <q-toolbar-title>{{ GroupName }}</q-toolbar-title>\r\n          <q-btn\r\n            flat\r\n            icon=\"person_add\"\r\n            round\r\n            dense\r\n            @click=\"addUser = CurrentGroupID > 0\"\r\n          ></q-btn>\r\n          <q-btn flat @click=\"drawer = !drawer\" round dense icon=\"menu\" />\r\n          <q-btn\r\n            flat\r\n            icon=\"cancel\"\r\n            round\r\n            dense\r\n            @click=\"$emit('CloseChatBox')\"\r\n          />\r\n        </q-toolbar>\r\n      </q-header>\r\n\r\n      <q-drawer v-model=\"drawer\" show-if-above :width=\"300\" :breakpoint=\"400\">\r\n        <q-scroll-area\r\n          style=\"\r\n            height: calc(100% - 150px);\r\n            margin-top: 150px;\r\n            border-right: 1px solid #ddd;\r\n          \"\r\n        >\r\n          <div>\r\n            <q-splitter v-model=\"splitterModel\" style=\"height: 350px\">\r\n              <template v-slot:before>\r\n                <q-tabs\r\n                  v-model=\"tab\"\r\n                  indicator-color=\"transparent\"\r\n                  active-color=\"lime-11\"\r\n                  class=\"bg-teal text-grey-5 shadow-2\"\r\n                  vertical\r\n                  style=\"height: 100%\"\r\n                >\r\n                  <q-tab name=\"chats\" icon=\"chat\">\r\n                    <q-badge v-if=\"TotalUnread > 0\" color=\"red\" floating>{{\r\n                      TotalUnread\r\n                    }}</q-badge>\r\n                  </q-tab>\r\n                  <q-tab name=\"friends\" icon=\"group\" />\r\n                  <q-tab name=\"others\" icon=\"favorite\" />\r\n                </q-tabs>\r\n              </template>\r\n\r\n              <template v-slot:after>\r\n                <q-tab-panels\r\n                  v-model=\"tab\"\r\n                  animated\r\n                  swipeable\r\n                  vertical\r\n                  transition-prev=\"jump-up\"\r\n                  transition-next=\"jump-up\"\r\n                >\r\n                  <q-tab-panel name=\"chats\">\r\n                    <q-list\r\n                      style=\"margin-left: -15px\"\r\n                      v-for=\"(grp, idx) in GroupList\"\r\n                      :key=\"idx\"\r\n                    >\r\n                      <q-menu\r\n                        style=\"z-index: 9999\"\r\n                        touch-position\r\n                        context-menu\r\n                        ref=\"myMenu\"\r\n                        transition-show=\"scale\"\r\n                        transition-hide=\"scale\"\r\n                      >\r\n                        <q-list style=\"min-width: 100px\">\r\n                          <q-item clickable v-close-popup>\r\n                            <q-item-section avatar>\r\n                              <q-icon color=\"indigo-14\" name=\"group_add\" />\r\n                            </q-item-section>\r\n                            <q-item-section style=\"margin-left: -25px\"\r\n                              >Add User</q-item-section\r\n                            >\r\n                          </q-item>\r\n                          <q-item clickable v-close-popup>\r\n                            <q-item-section avatar>\r\n                              <q-icon color=\"red-13\" name=\"clear_all\" />\r\n                            </q-item-section>\r\n                            <q-item-section style=\"margin-left: -25px\"\r\n                              >Clear History</q-item-section\r\n                            >\r\n                          </q-item>\r\n                          <q-item clickable v-close-popup>\r\n                            <q-item-section avatar>\r\n                              <q-icon color=\"red-13\" name=\"delete\" />\r\n                            </q-item-section>\r\n                            <q-item-section style=\"margin-left: -25px\"\r\n                              >Delete Group</q-item-section\r\n                            >\r\n                          </q-item>\r\n                        </q-list>\r\n                      </q-menu>\r\n                      <q-item\r\n                        style=\"margin-left: -15px; margin-right: -15px\"\r\n                        :active=\"grp.GROUP_ID == activeID\"\r\n                        clickable\r\n                        v-ripple\r\n                        active-class=\"GroupActiveClass\"\r\n                        @click=\"GroupClick(grp.GROUP_ID, grp.GROUP_NAME)\"\r\n                        @contextmenu=\"GroupRightClick(grp)\"\r\n                      >\r\n                        <q-item-section avatar>\r\n                          <q-avatar>\r\n                            <img :src=\"GroupAvatarList[idx]\" />\r\n                          </q-avatar>\r\n                        </q-item-section>\r\n                        <q-item-section style=\"margin: -15px\">\r\n                          <Group\r\n                            :GroupName=\"grp.GROUP_NAME\"\r\n                            :LastMsg=\"GroupList[idx].INFO.LAST_MSG\"\r\n                            :UnreadNum=\"GroupList[idx].INFO.UNREAD_NUM\"\r\n                          >\r\n                          </Group>\r\n                        </q-item-section>\r\n                      </q-item>\r\n                      <q-separator\r\n                        v-show=\"!(grp.GROUP_ID == activeID)\"\r\n                        color=\"grey-4\"\r\n                      />\r\n                    </q-list>\r\n                  </q-tab-panel>\r\n\r\n                  <q-tab-panel name=\"friends\">\r\n                    <div class=\"text-h4 q-mb-md\">Alarms</div>\r\n                    <p>N/A</p>\r\n                  </q-tab-panel>\r\n\r\n                  <q-tab-panel name=\"others\">\r\n                    <div class=\"text-h4 q-mb-md\">Movies</div>\r\n                    <p>\r\n                      Lorem ipsum dolor sit, amet consectetur adipisicing elit.\r\n                      Quis praesentium cumque magnam odio iure quidem, quod\r\n                      illum numquam possimus obcaecati commodi minima assumenda\r\n                      consectetur culpa fuga nulla ullam. In, libero. Lorem\r\n                      ipsum dolor sit, amet consectetur adipisicing elit. Quis\r\n                      praesentium cumque magnam odio iure quidem, quod illum\r\n                      numquam possimus obcaecati commodi minima assumenda\r\n                      consectetur culpa fuga nulla ullam. In, libero.\r\n                    </p>\r\n                  </q-tab-panel>\r\n                </q-tab-panels>\r\n              </template>\r\n            </q-splitter>\r\n          </div>\r\n        </q-scroll-area>\r\n\r\n        <q-img\r\n          class=\"absolute-top\"\r\n          src=\"../../assets/userBGR.png\"\r\n          style=\"height: 150px\"\r\n        >\r\n          <div class=\"absolute-bottom bg-transparent\">\r\n            <q-avatar size=\"56px\" class=\"q-mb-sm\" style=\"cursor: pointer\">\r\n              <img :src=\"imageFromByte(Avatar)\" />\r\n            </q-avatar>\r\n            <div class=\"text-weight-bold\">{{ GetUser.Name }}</div>\r\n            <div>{{ GetUser.Email }}</div>\r\n          </div>\r\n        </q-img>\r\n      </q-drawer>\r\n\r\n      <q-page-container class=\"custom-page-container\">\r\n        <q-page>\r\n          <His ref=\"MyHis\" @UpdateGroupInfo=\"UpdateGroupFromHis\"></His>\r\n          <div\r\n            v-if=\"addUser\"\r\n            class=\"fit absolute-center\"\r\n            style=\"background-color: rgba(0, 255, 255, 0.596)\"\r\n          >\r\n            <div class=\"myDialog absolute-center\">\r\n              <q-select\r\n                v-model=\"selectedUser\"\r\n                clearable\r\n                use-input\r\n                options-selected-class=\"text-deep-orange\"\r\n                label=\"Select Emp\"\r\n                :options=\"lstMembers\"\r\n                @filter=\"filterFn\"\r\n                @filter-abort=\"abortFilterFn\"\r\n                style=\"margin: 5px\"\r\n                multiple\r\n                counter\r\n                :popup-content-style=\"'z-index: 9999;'\"\r\n              >\r\n                <template v-slot:option=\"scope\">\r\n                  <q-item v-bind=\"scope.itemProps\">\r\n                    <q-item-section avatar>\r\n                      <q-icon :name=\"scope.opt.icon\" />\r\n                    </q-item-section>\r\n                    <q-item-section>\r\n                      <q-item-label>{{ scope.opt.label }}</q-item-label>\r\n                      <q-item-label caption>{{\r\n                        scope.opt.description\r\n                      }}</q-item-label>\r\n                    </q-item-section>\r\n                  </q-item>\r\n                </template>\r\n              </q-select>\r\n              <div class=\"absolute-bottom\">\r\n                <q-btn\r\n                  icon=\"done\"\r\n                  color=\"primary\"\r\n                  style=\"width: 150px; margin: 5px\"\r\n                  @click=\"AddGroupUser\"\r\n                  >OK</q-btn\r\n                >\r\n                <q-btn\r\n                  icon=\"cancel\"\r\n                  color=\"red\"\r\n                  style=\"width: 150px; margin: 5px\"\r\n                  @click=\"addUser = false\"\r\n                  >Cancel</q-btn\r\n                >\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </q-page>\r\n      </q-page-container>\r\n    </q-layout>\r\n  </div>\r\n</template>\r\n  \r\n  <script>\r\nimport { createCanvas, loadImage } from \"canvas\";\r\nimport { mapGetters } from \"vuex\";\r\nimport His from \"./HistoryBox.vue\";\r\nimport Group from \"./GroupInfo.vue\";\r\nexport default {\r\n  components: {\r\n    His,\r\n    Group,\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      GetUser: \"getUser\",\r\n    }),\r\n  },\r\n  mounted() {\r\n    this.Avatar = sessionStorage.getItem(\"Avatar\");\r\n    this.GetChatGroupList();\r\n    this.GetAllEMP();\r\n  },\r\n  methods: {\r\n    UpdateGroupFromHis(grp_info) {\r\n      this.GroupList.forEach((el, idx) => {\r\n        if (el.GROUP_ID == grp_info.GROUP_ID) {\r\n          this.GroupList[idx].INFO.LAST_MSG = grp_info.LAST_MSG;\r\n          if (this.CurrentGroupID != grp_info.GROUP_ID) {\r\n            this.GroupList[idx].INFO.UNREAD_NUM += grp_info.UNREAD_NUM;\r\n            this.TotalUnread += grp_info.UNREAD_NUM;\r\n          }\r\n        }\r\n      });\r\n    },\r\n    GroupClick(grp_id, grp_name) {\r\n      this.CurrentGroupID = grp_id;\r\n      this.$refs.MyHis.RefreshData(grp_id);\r\n      this.activeID = grp_id;\r\n      this.GroupName = grp_name;\r\n      this.addUser = false;\r\n      this.GroupList.forEach((el, idx) => {\r\n        if (el.GROUP_ID == grp_id) {\r\n          this.TotalUnread -= this.GroupList[idx].INFO.UNREAD_NUM;\r\n          this.GroupList[idx].INFO.UNREAD_NUM = 0;\r\n        }\r\n      });\r\n    },\r\n    GroupRightClick(grp) {\r\n      console.log(grp);\r\n    },\r\n    GetAllEMP() {\r\n      this.axios\r\n        .get(`api/chatapp/EmpSearch?emp=all`)\r\n        .then((res) => {\r\n          res.data.forEach((el) => {\r\n            this.stringOptions.push({\r\n              label: el.EMP_NAME,\r\n              value: el.EMP_ID,\r\n              description: el.EMP_NO,\r\n              icon: \"contact_mail\",\r\n            });\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    abortFilterFn() {\r\n      console.log(\"delayed filter aborted\");\r\n    },\r\n    async filterFn(val, update) {\r\n      update(() => {\r\n        if (val === \"\") {\r\n          this.lstMembers = this.stringOptions;\r\n        } else {\r\n          const needle = val.toLowerCase();\r\n          this.lstMembers = this.stringOptions.filter(\r\n            (v) =>\r\n              v.label.toLowerCase().indexOf(needle) > -1 ||\r\n              v.description.toLowerCase().indexOf(needle) > -1\r\n          );\r\n        }\r\n      });\r\n    },\r\n    async loadImageAsBase64(imagePath) {\r\n      try {\r\n        const response = await this.axios.get(imagePath, {\r\n          responseType: \"blob\",\r\n        });\r\n\r\n        const file = response.data;\r\n        // console.log(file);\r\n         const reader = new FileReader();\r\n        // let imageData = undefined;\r\n        // reader.onloadend = () => {\r\n        //   imageData = reader.result;\r\n        // };\r\n        const temp = await reader.readAsBinaryString(file);\r\n        console.log(temp);\r\n        return temp;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    async GroupAvatar(group, idx) {\r\n      const lsrImg = [];\r\n      group.INFO.EMP_AVATAR.forEach(async (el, id) => {\r\n        if (id <= 3) {\r\n          if (group.INFO.EMP_AVATAR.length == 2) {\r\n            if (el.EMP_ID != this.GetUser.EMP_ID) {\r\n              lsrImg.push(el.AVATAR);\r\n              return;\r\n            }\r\n          } else {\r\n            if (el.AVATAR) lsrImg.push(el.AVATAR);\r\n            else {\r\n              const noimg = await this.loadImageAsBase64(\"Images/noImg.png\");\r\n              lsrImg.push(noimg);\r\n            }\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n      });\r\n      const mergedImageUrl = await this.ImageMerging(lsrImg);\r\n      if (this.GroupAvatarList[idx]) {\r\n        this.GroupAvatarList[idx] = mergedImageUrl;\r\n      } else {\r\n        this.GroupAvatarList.push(mergedImageUrl);\r\n      }\r\n      this.GroupList[idx].INFO.EMP_AVATAR.AVATAR = undefined;\r\n    },\r\n    async ImageMerging(imgList) {\r\n      if (!imgList || imgList.length > 4) {\r\n        return \"#\";\r\n      }\r\n      if (imgList.length <= 2) {\r\n        return `data:image/png;base64,${imgList[0]}`;\r\n      }\r\n      const canvasWidth = 1000;\r\n      const canvasHeight = 1000;\r\n      let canvas = createCanvas(500, 500);\r\n      let ctx = canvas.getContext(\"2d\");\r\n      var lstSyncIMG = [];\r\n\r\n      return new Promise((resolve, reject) => {\r\n        const promises = [];\r\n\r\n        imgList.forEach((task) => {\r\n          const promise = new Promise((innerResolve, innerReject) => {\r\n            try {\r\n              loadImage(`data:image/png;base64,${task}`)\r\n                .then((res) => {\r\n                  ctx.drawImage(res, 0, 0, 500, 500);\r\n                  loadImage(canvas.toDataURL(\"image/png\"))\r\n                    .then((img) => {\r\n                      lstSyncIMG.push(img);\r\n                      innerResolve(img);\r\n                    })\r\n                    .catch((er) => innerReject(er));\r\n                })\r\n                .catch((err) => innerReject(err));\r\n            } catch (error) {\r\n              innerReject(error);\r\n            }\r\n          });\r\n\r\n          promises.push(promise);\r\n        });\r\n\r\n        Promise.all(promises)\r\n          .then(() => {\r\n            canvas = createCanvas(canvasWidth, canvasHeight);\r\n            ctx = canvas.getContext(\"2d\");\r\n\r\n            lstSyncIMG.forEach((el, idx) => {\r\n              switch (idx) {\r\n                case 0:\r\n                  ctx.drawImage(el, 0, 0, 500, 500);\r\n                  break;\r\n                case 1:\r\n                  ctx.drawImage(el, 500, 0, 500, 500);\r\n                  break;\r\n                case 2:\r\n                  ctx.drawImage(el, 0, 500, 500, 500);\r\n                  break;\r\n                case 3:\r\n                  ctx.drawImage(el, 500, 500, 500, 500);\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            });\r\n\r\n            resolve(canvas.toDataURL(\"image/png\"));\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n    GetChatGroupList() {\r\n      this.axios\r\n        .get(`api/chatapp/GetEmpAllGroup?emp_id=${this.GetUser.EMP_ID}`)\r\n        .then((res) => {\r\n          this.TotalUnread = 0;\r\n          this.GroupList = res.data;\r\n          this.GroupList.forEach((element, idx) => {\r\n            this.TotalUnread += element.INFO.UNREAD_NUM;\r\n            this.GroupAvatar(element, idx);\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    imageFromByte(strBase64) {\r\n      return `data:image/jpeg;base64,${strBase64}`;\r\n    },\r\n    AddGroupUser() {\r\n      if (this.CurrentGroupID > 0) {\r\n        if (this.selectedUser.length > 0) {\r\n          const grp_users = {\r\n            REMOVE_EMP: false,\r\n            GROUP_ID: this.CurrentGroupID,\r\n            EMP_LIST: [],\r\n          };\r\n          this.selectedUser.forEach((el) => {\r\n            grp_users.EMP_LIST.push(el.value);\r\n          });\r\n          console.log(grp_users);\r\n          this.axios\r\n            .post(\"api/chatapp/GroupEmpEdit\", grp_users)\r\n            .then((res) => {\r\n              this.$message({\r\n                showClose: true,\r\n                type: \"success\",\r\n                message: res.data,\r\n              });\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      }\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      NoImageData:undefined,\r\n      CurrentGroupID: 0,\r\n      addUser: false,\r\n      selectedUser: undefined,\r\n      lstMembers: [],\r\n      stringOptions: [],\r\n      tab: \"chats\",\r\n      splitterModel: 20,\r\n      Avatar: \"\",\r\n      drawer: false,\r\n      activeID: 0,\r\n      GroupName: \"\",\r\n      GroupList: [\r\n        {\r\n          GROUP_ID: 0,\r\n          GROUP_NAME: \"Default\",\r\n          INFO: {\r\n            SENDER_ID: 0,\r\n            LAST_MSG: \"None\",\r\n            LAST_TIME: undefined,\r\n            UNREAD_NUM: 0,\r\n            EMP_AVATAR: undefined,\r\n          },\r\n        },\r\n      ],\r\n      GroupAvatarList: [],\r\n      TotalUnread: 0,\r\n    };\r\n  },\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.selectEMPStyle {\r\n  z-index: 9999;\r\n  max-height: 300px;\r\n}\r\n.myDialog {\r\n  background-color: rgb(255, 255, 255);\r\n  width: 80%;\r\n  height: 50%;\r\n  border-radius: 5px;\r\n}\r\n.custom-page-container {\r\n  background-color: #1f144b;\r\n}\r\n.GroupActiveClass {\r\n  background-color: aquamarine;\r\n}\r\n</style>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}