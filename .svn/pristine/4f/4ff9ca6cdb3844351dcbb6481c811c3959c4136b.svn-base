{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5af81a4a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"gause-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\FATPkanban\\WoTarget.vue"],"sourcesContent":["<template>\r\n  <div id=\"gause-chart\"></div>\r\n</template>\r\n\r\n<script>\r\nimport GetOption from \"./Datas/gauge\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      option: GetOption(),\r\n    };\r\n  },\r\n  methods: {\r\n    DataUpdate() {\r\n      this.axios\r\n        .post(\"api/FATPKanban/GetWoTarget\", { PDLINE_ID: \"10002\", DB: \"BU20\" })\r\n        .then((res) => {\r\n          res.data.data.forEach((el) => {\r\n            console.log(el);\r\n            var gaugeDT = [];\r\n            gaugeDT.push({\r\n              value: el.PERCENT,\r\n              name: el.WORK_ORDER,\r\n              title: {\r\n                offsetCenter: [\"0%\", \"-35%\"],\r\n              },\r\n              detail: {\r\n                valueAnimation: true,\r\n                offsetCenter: [\"0%\", \"-20%\"],\r\n              },\r\n            });\r\n            this.option.series[0].data = gaugeDT;\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n  },\r\n  mounted() {\r\n    this.DataUpdate();\r\n    var dom = document.getElementById(\"gause-chart\");\r\n    var myChart = this.$Echart.init(dom, null, {\r\n      renderer: \"canvas\",\r\n      useDirtyRect: false,\r\n    });\r\n    // setInterval(function () {\r\n    //   gaugeData[0].value = +(Math.random() * 100).toFixed(2);\r\n    //   gaugeData[1].value = +(Math.random() * 100).toFixed(2);\r\n    //   gaugeData[2].value = +(Math.random() * 100).toFixed(2);\r\n    //   myChart.setOption({\r\n    //     series: [\r\n    //       {\r\n    //         data: gaugeData,\r\n    //         pointer: {\r\n    //           show: false\r\n    //         }\r\n    //       }\r\n    //     ]\r\n    //   });\r\n    // }, 5000);\r\n\r\n    if (this.option && typeof this.option === \"object\") {\r\n      myChart.setOption(this.option);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", myChart.resize);\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#gause-chart {\r\n  position: relative;\r\n  height: 50vh;\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n</style>"],"mappings":";;;EACOA,EAAE,EAAC;AAAa;;uBAArBC,mBAAA,CAA4B,OAA5BC,UAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}