{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-721c864b\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"ecircle\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\FATPkanban\\TopFailByStation.vue"],"sourcesContent":["<template>\r\n  <div id=\"ecircle\"></div>\r\n</template>\r\n\r\n<script>\r\nimport GetOption from \"./Datas/topbyStation\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      myChart: undefined,\r\n      option: GetOption(),\r\n      colors : [\"#04B404\",\r\n    \"orange\",\r\n    \"yellow\",\r\n    \"red\",\r\n    \"indigo\",\r\n    \"purple\",\r\n    \"#cccccc\",]\r\n    };\r\n  },\r\n  mounted() {\r\n    var dom = document.getElementById(\"ecircle\");\r\n    this.myChart = this.$Echart.init(dom, null, {\r\n      renderer: \"canvas\",\r\n      useDirtyRect: false,\r\n    });\r\n\r\n    if (this.option && typeof this.option === \"object\") {\r\n      this.myChart.setOption(this.option);\r\n    }\r\n    window.addEventListener(\"resize\", this.myChart.resize);\r\n    this.DataUpdate({ PDLINE_ID: \"10003\", DB: \"BU20\" });\r\n  },\r\n  methods: {\r\n    getChartData(iData){\r\n      const data = [];\r\n      for (let id = 0; id < iData.length; id++) {\r\n        const el = iData[id];\r\n        data.push({ value: el.QTY, name: el.DEFECT_CODE });\r\n      }\r\n      return data;\r\n    },\r\n    DataUpdate(iLine) {\r\n      this.myChart.clear();\r\n      this.axios\r\n        .post(\"api/FATPKanban/GetTOP5FailByStation\", iLine)\r\n        .then((res) => {\r\n          if (res.data.status == \"OK\") {\r\n            console.log(res.data.data);    \r\n            const sr=[];      \r\n            for (let i = 0; i < res.data.data.DATA.length; i++) {\r\n              const el = res.data.data[i];\r\n              sr.push({\r\n                name: el.PROCESS_NAME,\r\n                type: 'pie',\r\n                radius: '45%',\r\n                center: [`${i*20 + 10}%`, '45%'],\r\n                color: this.colors,\r\n                label: {\r\n                    normal: {\r\n                        formatter: '{b}:{c}',\r\n                        show: true,\r\n                        position: 'outside'\r\n                    },\r\n\r\n                },\r\n                labelLine: {\r\n                    normal: {\r\n                        show: true\r\n                    }\r\n                },\r\n                data: this.getChartData(el.INFO)\r\n            });\r\n            }\r\n            console.log(this.option);\r\n            this.option.series=sr;\r\n            this.myChart.setOption(this.option);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#ecircle {\r\n  height: 30vh;\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n</style>"],"mappings":";;;EACOA,EAAE,EAAC;AAAS;;uBAAjBC,mBAAA,CAAwB,OAAxBC,UAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}