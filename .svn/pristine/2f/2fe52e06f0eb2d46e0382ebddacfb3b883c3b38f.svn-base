{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-656467e0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nconst _hoisted_2 = {\n  class: \"q-pa-md row justify-center\",\n  style: {\n    \"padding\": \"0 !important\"\n  }\n};\nconst _hoisted_3 = {\n  style: {\n    \"width\": \"100%\",\n    \"margin\": \"0 !important\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Qmsg = _resolveComponent(\"Qmsg\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ChatHis, (msg, id) => {\n    return _openBlock(), _createBlock(_component_Qmsg, {\n      key: id,\n      Name: msg.Sender,\n      MemberID: msg.ID,\n      BGColor: msg.Sender == 'NinhLe' ? $data.MSGTextColor.Sender : $data.MSGTextColor.Receiver,\n      Message: msg.message,\n      Sent: msg.Sender == 'NinhLe',\n      Stamp: \"7 minutes ago\",\n      TextColor: \"white\"\n    }, null, 8 /* PROPS */, [\"Name\", \"MemberID\", \"BGColor\", \"Message\", \"Sent\"]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","ChatHis","msg","id","_createBlock","_component_Qmsg","key","Name","Sender","MemberID","ID","BGColor","MSGTextColor","Receiver","Message","message","Sent","Stamp","TextColor"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\QMessage\\HistoryBox.vue"],"sourcesContent":["<template>\r\n    <div class=\"hello\">\r\n      <div class=\"q-pa-md row justify-center\" style=\"padding: 0 !important;\">\r\n        <div style=\"width: 100%; margin: 0 !important;\">\r\n          <Qmsg\r\n            v-for=\"(msg, id) in ChatHis\"\r\n            :key=\"id\"\r\n            :Name=\"msg.Sender\"\r\n            :MemberID=\"msg.ID\"\r\n            :BGColor=\"\r\n              msg.Sender == 'NinhLe' ? MSGTextColor.Sender : MSGTextColor.Receiver\r\n            \"\r\n            :Message=\"msg.message\"\r\n            :Sent=\"msg.Sender == 'NinhLe'\"\r\n            Stamp=\"7 minutes ago\"\r\n            TextColor=\"white\"\r\n          ></Qmsg>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import Qmsg from \"./Qmsg.vue\";\r\n  export default {\r\n    name: \"HistoryBox\",\r\n    components: {\r\n      Qmsg,\r\n    },\r\n    props: {},\r\n    mounted() {\r\n      this.GetMemberInfor();\r\n      this.GetChatHistory();\r\n    },\r\n    data() {\r\n      return {\r\n        testIMG:'',\r\n        MSGTextColor: { Sender: \"indigo-14\", Receiver: \"blue-grey-3\" },\r\n        members: undefined,\r\n        groupID: 2,\r\n        ChatHis: [],\r\n      };\r\n    },\r\n    methods: {\r\n      ShowAvatar(member) {\r\n        if (this.members)\r\n          this.members.forEach((item) => {\r\n            if (item.EMP_ID == member) {\r\n              return { img: this.imageFromByte(item.PICUSER) };\r\n            }\r\n          });\r\n      },\r\n      imageFromByte(strBase64) {\r\n        return `data:image/jpeg;base64,${strBase64}`;\r\n      },\r\n      async GetMemberInfor() {\r\n        await this.axios\r\n          .get(`api/chatapp/GetGroupMemberInfo?groupID=${this.groupID}`)\r\n          .then((res) => {\r\n            this.members = res.data;\r\n            this.testIMG=this.members[0].PICUSER;\r\n          })\r\n          .catch((err) => {\r\n            console.log(err.response.data);\r\n          });\r\n      },\r\n      async GetChatHistory() {\r\n        await this.axios\r\n          .get(`api/chatapp/GetHistory?groupID=${this.groupID}`)\r\n          .then((res) => {\r\n            var sentEMP = res.data[0].SENDER_ID;\r\n            var msg = undefined;\r\n            res.data.forEach((item) => {\r\n              if (!msg) {\r\n                msg = {\r\n                  Sender: item.SENDER,\r\n                  ID: item.SENDER_ID,\r\n                  message: [{ text: item.MES_CONTENT }],\r\n                };\r\n              } else {\r\n                if (sentEMP == item.SENDER_ID) {\r\n                  msg.message.push({ text: item.MES_CONTENT });\r\n                } else {\r\n                  this.ChatHis.push(msg);\r\n                  msg = {\r\n                    Sender: item.SENDER,\r\n                    ID: item.SENDER_ID,\r\n                    message: [{ text: item.MES_CONTENT }],\r\n                  };\r\n                }\r\n              }\r\n              sentEMP = item.SENDER_ID;\r\n            });\r\n            this.ChatHis.push(msg);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n  <style scoped>\r\n  .my-emoticon {\r\n    vertical-align: middle;\r\n    height: 2em;\r\n    width: 2em;\r\n  }\r\n  \r\n  h3 {\r\n    margin: 40px 0 0;\r\n  }\r\n  ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n  }\r\n  li {\r\n    display: inline-block;\r\n    margin: 0 10px;\r\n  }\r\n  a {\r\n    color: #42b983;\r\n  }\r\n  </style>\r\n  "],"mappings":";;;EACSA,KAAK,EAAC;AAAO;;EACXA,KAAK,EAAC,4BAA4B;EAACC,KAA8B,EAA9B;IAAA;EAAA;;;EACjCA,KAA0C,EAA1C;IAAA;IAAA;EAAA;AAA0C;;;uBAFnDC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,mBAAA,CAgBM,OAhBNC,UAgBM,GAfJD,mBAAA,CAcM,OAdNE,UAcM,I,kBAbJJ,mBAAA,CAYQK,SAAA,QAAAC,WAAA,CAXcC,KAAA,CAAAC,OAAO,GAAnBC,GAAG,EAAEC,EAAE;yBADjBC,YAAA,CAYQC,eAAA;MAVLC,GAAG,EAAEH,EAAE;MACPI,IAAI,EAAEL,GAAG,CAACM,MAAM;MAChBC,QAAQ,EAAEP,GAAG,CAACQ,EAAE;MAChBC,OAAO,EAAkBT,GAAG,CAACM,MAAM,eAAeR,KAAA,CAAAY,YAAY,CAACJ,MAAM,GAAGR,KAAA,CAAAY,YAAY,CAACC,QAAQ;MAG7FC,OAAO,EAAEZ,GAAG,CAACa,OAAO;MACpBC,IAAI,EAAEd,GAAG,CAACM,MAAM;MACjBS,KAAK,EAAC,eAAe;MACrBC,SAAS,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}