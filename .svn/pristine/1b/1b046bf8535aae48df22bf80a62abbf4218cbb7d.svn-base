{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-a80eac0c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  style: {\n    \"padding-left\": \"150px\"\n  }\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"pie-chart\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"names":["style","_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["D:\\LearnVueJS\\Vue3\\Projects\\fa-sop-online\\src\\components\\FATPkanban\\StationYield.vue"],"sourcesContent":["<template>\r\n  <div style=\"padding-left: 150px\"><div id=\"pie-chart\"></div></div>\r\n</template>\r\n  \r\n  <script>\r\nimport GetOption from \"./Datas/stationYield\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      option: GetOption(),\r\n      myChart: undefined,\r\n      colors: [\r\n        \"#1478eb\",\r\n        \"green\",\r\n        \"orange\",\r\n        \"yellow\",\r\n        \"red\",\r\n        \"indigo\",\r\n        \"purple\",\r\n        \"#cccccc\",\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    DataUpdate(line) {\r\n      this.myChart.clear();\r\n      this.axios\r\n        .post(\"api/FATPKanban/GetYieldDetail\", line)\r\n        .then((res) => {\r\n          console.log(res.data.data);\r\n          const [sr, grp] = this.GetSeries(res.data.data);\r\n          if (sr.length > 0) {\r\n            this.option.series = sr;\r\n            this.option.graphic = grp;\r\n            this.myChart.setOption(this.option);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    GetSeries(data) {\r\n      const rs = [];\r\n      const grp = [];\r\n      const offset =\r\n        data.length > 0 ? Math.floor(this.myChart.getWidth() / data.length) : 1;\r\n      var labelFromatter = {\r\n        normal: {\r\n          color: function (params) {\r\n            if (params.value >= 99) {\r\n              return \"#04B404\";\r\n            } else if (params.value >= 97.5) {\r\n              return \"#0080FF\";\r\n            } else if (params.value >= 96) {\r\n              return \"#FE9A2E\";\r\n            } else {\r\n              return \"#FE2E2E\";\r\n            }\r\n          },\r\n          label: {\r\n            formatter: function (params) {\r\n              return params.value + \"%\";\r\n            },\r\n            textStyle: {\r\n              baseline: \"top\",\r\n            },\r\n            color: \"auto\",\r\n            fontSize: 20,\r\n            position: \"center\",\r\n          },\r\n        },\r\n      };\r\n      var labelTop = {\r\n        normal: {\r\n          label: {\r\n            show: true,\r\n            position: \"center\",\r\n            formatter: \"{b}\",\r\n            textStyle: {\r\n              baseline: \"bottom\",\r\n            },\r\n          },\r\n\r\n          labelLine: {\r\n            show: false,\r\n          },\r\n        },\r\n      };\r\n      var labelBottom = {\r\n        normal: {\r\n          color: \"#ccc\",\r\n          label: {\r\n            show: true,\r\n            textStyle: {\r\n              baseline: \"top\",\r\n            },\r\n            position: \"center\",\r\n          },\r\n          labelLine: {\r\n            show: false,\r\n          },\r\n        },\r\n        emphasis: {\r\n          color: \"rgba(0,0,0,0)\",\r\n        },\r\n      };\r\n      for (let id = 0; id < data.length; id++) {\r\n        const el = data[id];\r\n        grp.push({\r\n          type: \"text\",\r\n          style: {\r\n            text: el.PROCESS_NAME,\r\n            x: id * offset + 40,\r\n            y: 260,\r\n            fill: \"#fff\",\r\n            font: \"20px verdana\",\r\n          },\r\n        });\r\n        rs.push({\r\n          type: \"pie\",\r\n          center: [id * offset + 60, \"50%\"],\r\n          radius: [45, 60],\r\n          x: \"0%\",\r\n          itemStyle: labelFromatter,\r\n          data: [\r\n            {\r\n              name: \"pass\",\r\n              value: el.PERCENT,\r\n              itemStyle: labelTop,\r\n              label: { show: true, fontSize: 18 },\r\n            },\r\n            {\r\n              name: \"fail\",\r\n              value: 100 - el.PERCENT,\r\n              itemStyle: labelBottom,\r\n              label: { show: false, position: \"inside\" },\r\n            },\r\n          ],\r\n        });\r\n      }\r\n      return [rs, grp];\r\n    },\r\n  },\r\n  mounted() {\r\n    var dom = document.getElementById(\"pie-chart\");\r\n    this.myChart = this.$Echart.init(dom, null, {\r\n      renderer: \"canvas\",\r\n      useDirtyRect: false,\r\n    });\r\n\r\n    if (this.option && typeof this.option === \"object\") {\r\n      this.myChart.setOption(this.option);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", this.myChart.resize);\r\n    this.DataUpdate({ PDLINE_ID: \"10001\", DB: \"BU20\" });\r\n  },\r\n};\r\n</script>\r\n  \r\n  <style lang=\"scss\" scoped>\r\n#pie-chart {\r\n  height: 40vh;\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n</style>"],"mappings":";;;EACOA,KAA2B,EAA3B;IAAA;EAAA;AAA2B;gEAACC,mBAAA,CAA0B;EAArBC,EAAE,EAAC;AAAW;oBAAnBC,UAA0B,C;;uBAA3DC,mBAAA,CAAiE,OAAjEC,UAAiE,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}